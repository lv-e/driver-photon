
/Users/lv/Github/driver-photon/driver-photon/target/1.5.2/photon/driver-photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d04  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1d20  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000089b0  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a1d8c  080a1d8c  00021d8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1db4  080a1db4  00021db4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ab700  00000000  00000000  00021db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ff21  00000000  00000000  000cd4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013171  00000000  00000000  000dd3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002150  00000000  00000000  000f054a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003420  00000000  00000000  000f269a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002504e  00000000  00000000  000f5aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024cf4  00000000  00000000  0011ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa5a4  00000000  00000000  0013f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb54  00000000  00000000  001e9da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 fcc7 	bl	80a19c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 fccc 	bl	80a19d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1d24 	.word	0x080a1d24
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20008a18 	.word	0x20008a18
 80a0058:	20008a18 	.word	0x20008a18

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa61 	bl	80a1524 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1ce0 	.word	0x080a1ce0
 80a0084:	080a1d18 	.word	0x080a1d18

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8ae 	b.w	80a01e8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8bd 	bl	80a020c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba07 	b.w	80a14a8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd4d 	b.w	80a0b38 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd53 	b.w	80a0b48 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <NVIC_Init>:
 80a00b4:	78c3      	ldrb	r3, [r0, #3]
 80a00b6:	b31b      	cbz	r3, 80a0100 <NVIC_Init+0x4c>
 80a00b8:	4b17      	ldr	r3, [pc, #92]	; (80a0118 <NVIC_Init+0x64>)
 80a00ba:	68da      	ldr	r2, [r3, #12]
 80a00bc:	7843      	ldrb	r3, [r0, #1]
 80a00be:	43d2      	mvns	r2, r2
 80a00c0:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80a00c4:	f1c2 0104 	rsb	r1, r2, #4
 80a00c8:	b2c9      	uxtb	r1, r1
 80a00ca:	408b      	lsls	r3, r1
 80a00cc:	b2d9      	uxtb	r1, r3
 80a00ce:	230f      	movs	r3, #15
 80a00d0:	4113      	asrs	r3, r2
 80a00d2:	7882      	ldrb	r2, [r0, #2]
 80a00d4:	4013      	ands	r3, r2
 80a00d6:	7802      	ldrb	r2, [r0, #0]
 80a00d8:	430b      	orrs	r3, r1
 80a00da:	011b      	lsls	r3, r3, #4
 80a00dc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 80a00e0:	b2db      	uxtb	r3, r3
 80a00e2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80a00e6:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
 80a00ea:	7803      	ldrb	r3, [r0, #0]
 80a00ec:	2201      	movs	r2, #1
 80a00ee:	0959      	lsrs	r1, r3, #5
 80a00f0:	f003 031f 	and.w	r3, r3, #31
 80a00f4:	fa02 f303 	lsl.w	r3, r2, r3
 80a00f8:	4a08      	ldr	r2, [pc, #32]	; (80a011c <NVIC_Init+0x68>)
 80a00fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80a00fe:	4770      	bx	lr
 80a0100:	7803      	ldrb	r3, [r0, #0]
 80a0102:	2101      	movs	r1, #1
 80a0104:	095a      	lsrs	r2, r3, #5
 80a0106:	f003 031f 	and.w	r3, r3, #31
 80a010a:	4099      	lsls	r1, r3
 80a010c:	f102 0320 	add.w	r3, r2, #32
 80a0110:	4a02      	ldr	r2, [pc, #8]	; (80a011c <NVIC_Init+0x68>)
 80a0112:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80a0116:	4770      	bx	lr
 80a0118:	e000ed00 	.word	0xe000ed00
 80a011c:	e000e100 	.word	0xe000e100

080a0120 <RCC_APB1PeriphClockCmd>:
 80a0120:	4b04      	ldr	r3, [pc, #16]	; (80a0134 <RCC_APB1PeriphClockCmd+0x14>)
 80a0122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80a0124:	b109      	cbz	r1, 80a012a <RCC_APB1PeriphClockCmd+0xa>
 80a0126:	4310      	orrs	r0, r2
 80a0128:	e001      	b.n	80a012e <RCC_APB1PeriphClockCmd+0xe>
 80a012a:	ea22 0000 	bic.w	r0, r2, r0
 80a012e:	6418      	str	r0, [r3, #64]	; 0x40
 80a0130:	4770      	bx	lr
 80a0132:	bf00      	nop
 80a0134:	40023800 	.word	0x40023800

080a0138 <TIM_TimeBaseInit>:
 80a0138:	4a1c      	ldr	r2, [pc, #112]	; (80a01ac <TIM_TimeBaseInit+0x74>)
 80a013a:	8803      	ldrh	r3, [r0, #0]
 80a013c:	4290      	cmp	r0, r2
 80a013e:	b29b      	uxth	r3, r3
 80a0140:	d012      	beq.n	80a0168 <TIM_TimeBaseInit+0x30>
 80a0142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0146:	4290      	cmp	r0, r2
 80a0148:	d00e      	beq.n	80a0168 <TIM_TimeBaseInit+0x30>
 80a014a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80a014e:	d00b      	beq.n	80a0168 <TIM_TimeBaseInit+0x30>
 80a0150:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80a0154:	4290      	cmp	r0, r2
 80a0156:	d007      	beq.n	80a0168 <TIM_TimeBaseInit+0x30>
 80a0158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a015c:	4290      	cmp	r0, r2
 80a015e:	d003      	beq.n	80a0168 <TIM_TimeBaseInit+0x30>
 80a0160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a0164:	4290      	cmp	r0, r2
 80a0166:	d103      	bne.n	80a0170 <TIM_TimeBaseInit+0x38>
 80a0168:	884a      	ldrh	r2, [r1, #2]
 80a016a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80a016e:	4313      	orrs	r3, r2
 80a0170:	4a0f      	ldr	r2, [pc, #60]	; (80a01b0 <TIM_TimeBaseInit+0x78>)
 80a0172:	4290      	cmp	r0, r2
 80a0174:	d008      	beq.n	80a0188 <TIM_TimeBaseInit+0x50>
 80a0176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80a017a:	4290      	cmp	r0, r2
 80a017c:	bf1f      	itttt	ne
 80a017e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80a0182:	890a      	ldrhne	r2, [r1, #8]
 80a0184:	b29b      	uxthne	r3, r3
 80a0186:	4313      	orrne	r3, r2
 80a0188:	8003      	strh	r3, [r0, #0]
 80a018a:	684b      	ldr	r3, [r1, #4]
 80a018c:	62c3      	str	r3, [r0, #44]	; 0x2c
 80a018e:	880b      	ldrh	r3, [r1, #0]
 80a0190:	8503      	strh	r3, [r0, #40]	; 0x28
 80a0192:	4b06      	ldr	r3, [pc, #24]	; (80a01ac <TIM_TimeBaseInit+0x74>)
 80a0194:	4298      	cmp	r0, r3
 80a0196:	d003      	beq.n	80a01a0 <TIM_TimeBaseInit+0x68>
 80a0198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80a019c:	4298      	cmp	r0, r3
 80a019e:	d101      	bne.n	80a01a4 <TIM_TimeBaseInit+0x6c>
 80a01a0:	7a8b      	ldrb	r3, [r1, #10]
 80a01a2:	8603      	strh	r3, [r0, #48]	; 0x30
 80a01a4:	2301      	movs	r3, #1
 80a01a6:	8283      	strh	r3, [r0, #20]
 80a01a8:	4770      	bx	lr
 80a01aa:	bf00      	nop
 80a01ac:	40010000 	.word	0x40010000
 80a01b0:	40001000 	.word	0x40001000

080a01b4 <TIM_Cmd>:
 80a01b4:	8803      	ldrh	r3, [r0, #0]
 80a01b6:	b119      	cbz	r1, 80a01c0 <TIM_Cmd+0xc>
 80a01b8:	b29b      	uxth	r3, r3
 80a01ba:	f043 0301 	orr.w	r3, r3, #1
 80a01be:	e003      	b.n	80a01c8 <TIM_Cmd+0x14>
 80a01c0:	f023 0301 	bic.w	r3, r3, #1
 80a01c4:	041b      	lsls	r3, r3, #16
 80a01c6:	0c1b      	lsrs	r3, r3, #16
 80a01c8:	8003      	strh	r3, [r0, #0]
 80a01ca:	4770      	bx	lr

080a01cc <TIM_ITConfig>:
 80a01cc:	8983      	ldrh	r3, [r0, #12]
 80a01ce:	b29b      	uxth	r3, r3
 80a01d0:	b10a      	cbz	r2, 80a01d6 <TIM_ITConfig+0xa>
 80a01d2:	4319      	orrs	r1, r3
 80a01d4:	e001      	b.n	80a01da <TIM_ITConfig+0xe>
 80a01d6:	ea23 0101 	bic.w	r1, r3, r1
 80a01da:	8181      	strh	r1, [r0, #12]
 80a01dc:	4770      	bx	lr

080a01de <TIM_ClearITPendingBit>:
 80a01de:	43c9      	mvns	r1, r1
 80a01e0:	b289      	uxth	r1, r1
 80a01e2:	8201      	strh	r1, [r0, #16]
 80a01e4:	4770      	bx	lr
	...

080a01e8 <setup>:
#include "display/lcd.h"

LCD lcd;
unsigned int framecounter = 0;

void setup() {
 80a01e8:	b510      	push	{r4, lr}
  pinMode(D7, OUTPUT);
  lcd.setup();
 80a01ea:	4c07      	ldr	r4, [pc, #28]	; (80a0208 <setup+0x20>)

LCD lcd;
unsigned int framecounter = 0;

void setup() {
  pinMode(D7, OUTPUT);
 80a01ec:	2101      	movs	r1, #1
 80a01ee:	2007      	movs	r0, #7
 80a01f0:	f001 fa02 	bl	80a15f8 <pinMode>
  lcd.setup();
 80a01f4:	4620      	mov	r0, r4
 80a01f6:	f000 fa81 	bl	80a06fc <_ZN3LCD5setupEv>
  lcd.clear(0b1110000000000111);
 80a01fa:	4620      	mov	r0, r4
}
 80a01fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
unsigned int framecounter = 0;

void setup() {
  pinMode(D7, OUTPUT);
  lcd.setup();
  lcd.clear(0b1110000000000111);
 80a0200:	f24e 0107 	movw	r1, #57351	; 0xe007
 80a0204:	f000 b8ad 	b.w	80a0362 <_ZN3LCD5clearEj>
 80a0208:	20000074 	.word	0x20000074

080a020c <loop>:
}

void loop() {
  
  switch ((framecounter++) % 100){
 80a020c:	4a0e      	ldr	r2, [pc, #56]	; (80a0248 <loop+0x3c>)
 80a020e:	6813      	ldr	r3, [r2, #0]
 80a0210:	1c59      	adds	r1, r3, #1
 80a0212:	6011      	str	r1, [r2, #0]
 80a0214:	2164      	movs	r1, #100	; 0x64
 80a0216:	fbb3 f2f1 	udiv	r2, r3, r1
 80a021a:	fb01 3312 	mls	r3, r1, r2, r3
 80a021e:	b14b      	cbz	r3, 80a0234 <loop+0x28>
 80a0220:	2b32      	cmp	r3, #50	; 0x32
 80a0222:	d10e      	bne.n	80a0242 <loop+0x36>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0224:	4b09      	ldr	r3, [pc, #36]	; (80a024c <loop+0x40>)
 80a0226:	681b      	ldr	r3, [r3, #0]
 80a0228:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80a022c:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80a0230:	8353      	strh	r3, [r2, #26]
 80a0232:	e006      	b.n	80a0242 <loop+0x36>
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0234:	4b05      	ldr	r3, [pc, #20]	; (80a024c <loop+0x40>)
 80a0236:	681b      	ldr	r3, [r3, #0]
 80a0238:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80a023c:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80a0240:	8313      	strh	r3, [r2, #24]
    case 0: pinSetFast(D7); break;
    case 50: pinResetFast(D7); break;
    default: break;
  }

  lcd.loop();
 80a0242:	4803      	ldr	r0, [pc, #12]	; (80a0250 <loop+0x44>)
 80a0244:	f000 ba18 	b.w	80a0678 <_ZN3LCD4loopEv>
 80a0248:	2000006c 	.word	0x2000006c
 80a024c:	20000070 	.word	0x20000070
 80a0250:	20000074 	.word	0x20000074

080a0254 <_GLOBAL__sub_I_lcd>:
 80a0254:	b530      	push	{r4, r5, lr}
 80a0256:	b087      	sub	sp, #28
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0258:	f000 fad8 	bl	80a080c <HAL_Pin_Map>
 80a025c:	4b0e      	ldr	r3, [pc, #56]	; (80a0298 <_GLOBAL__sub_I_lcd+0x44>)
#include "display/lcd.h"

LCD lcd;
 80a025e:	2282      	movs	r2, #130	; 0x82
 80a0260:	ac04      	add	r4, sp, #16
 80a0262:	6018      	str	r0, [r3, #0]
 80a0264:	4611      	mov	r1, r2
 80a0266:	4620      	mov	r0, r4
 80a0268:	f000 f81e 	bl	80a02a8 <_ZN6RegionC1Ett>
 80a026c:	a802      	add	r0, sp, #8
 80a026e:	f000 fa6b 	bl	80a0748 <_ZN4PinsC1Ev>
 80a0272:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80a0276:	4d09      	ldr	r5, [pc, #36]	; (80a029c <_GLOBAL__sub_I_lcd+0x48>)
 80a0278:	f8ad 3000 	strh.w	r3, [sp]
 80a027c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0280:	9b02      	ldr	r3, [sp, #8]
 80a0282:	4628      	mov	r0, r5
 80a0284:	f000 f854 	bl	80a0330 <_ZN3LCDC1E6Region4Pins>
 80a0288:	4a05      	ldr	r2, [pc, #20]	; (80a02a0 <_GLOBAL__sub_I_lcd+0x4c>)
 80a028a:	4906      	ldr	r1, [pc, #24]	; (80a02a4 <_GLOBAL__sub_I_lcd+0x50>)
 80a028c:	4628      	mov	r0, r5
 80a028e:	f001 fa1d 	bl	80a16cc <__aeabi_atexit>
    case 50: pinResetFast(D7); break;
    default: break;
  }

  lcd.loop();
 80a0292:	b007      	add	sp, #28
 80a0294:	bd30      	pop	{r4, r5, pc}
 80a0296:	bf00      	nop
 80a0298:	20000070 	.word	0x20000070
 80a029c:	20000074 	.word	0x20000074
 80a02a0:	20000068 	.word	0x20000068
 80a02a4:	080a0361 	.word	0x080a0361

080a02a8 <_ZN6RegionC1Ett>:
Region::Region(){ 
    origin = (Point) { (unsigned short) 0, (unsigned short) 0 };
    size = (Size){ (unsigned short) 0, (unsigned short) 0 };
};

Region::Region(unsigned short width, unsigned short height){
 80a02a8:	b510      	push	{r4, lr}
    origin = (Point) { (unsigned short) 0, (unsigned short) 0 };
 80a02aa:	2400      	movs	r4, #0
 80a02ac:	8004      	strh	r4, [r0, #0]
 80a02ae:	8044      	strh	r4, [r0, #2]
    size = (Size){ width, height };
 80a02b0:	8081      	strh	r1, [r0, #4]
 80a02b2:	80c2      	strh	r2, [r0, #6]
 80a02b4:	bd10      	pop	{r4, pc}

080a02b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a02b6:	6803      	ldr	r3, [r0, #0]
 80a02b8:	4718      	bx	r3

080a02ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a02ba:	2a01      	cmp	r2, #1
 80a02bc:	d002      	beq.n	80a02c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a02be:	2a02      	cmp	r2, #2
 80a02c0:	d002      	beq.n	80a02c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a02c2:	e004      	b.n	80a02ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a02c4:	6001      	str	r1, [r0, #0]
	      break;
 80a02c6:	e002      	b.n	80a02ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a02c8:	680b      	ldr	r3, [r1, #0]
 80a02ca:	b100      	cbz	r0, 80a02ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a02cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a02ce:	2000      	movs	r0, #0
 80a02d0:	4770      	bx	lr
	...

080a02d4 <timerISRoutine>:

extern "C" {

    volatile bool isrActivated = false;

    void timerISRoutine() {
 80a02d4:	b508      	push	{r3, lr}
        TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
 80a02d6:	2101      	movs	r1, #1
 80a02d8:	4803      	ldr	r0, [pc, #12]	; (80a02e8 <timerISRoutine+0x14>)
 80a02da:	f7ff ff80 	bl	80a01de <TIM_ClearITPendingBit>
        isrActivated = true;
 80a02de:	4b03      	ldr	r3, [pc, #12]	; (80a02ec <timerISRoutine+0x18>)
 80a02e0:	2201      	movs	r2, #1
 80a02e2:	701a      	strb	r2, [r3, #0]
 80a02e4:	bd08      	pop	{r3, pc}
 80a02e6:	bf00      	nop
 80a02e8:	40000c00 	.word	0x40000c00
 80a02ec:	2000849c 	.word	0x2000849c

080a02f0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a02f0:	b510      	push	{r4, lr}
 80a02f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02f4:	6880      	ldr	r0, [r0, #8]
 80a02f6:	b108      	cbz	r0, 80a02fc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02f8:	f000 fa60 	bl	80a07bc <os_mutex_recursive_destroy>
 80a02fc:	4620      	mov	r0, r4
 80a02fe:	bd10      	pop	{r4, pc}

080a0300 <_ZN4Pins15configureAsDataEv.isra.3>:
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0300:	231c      	movs	r3, #28
 80a0302:	4358      	muls	r0, r3
 80a0304:	4b03      	ldr	r3, [pc, #12]	; (80a0314 <_ZN4Pins15configureAsDataEv.isra.3+0x14>)
 80a0306:	681b      	ldr	r3, [r3, #0]
 80a0308:	181a      	adds	r2, r3, r0
 80a030a:	8892      	ldrh	r2, [r2, #4]
 80a030c:	581b      	ldr	r3, [r3, r0]
 80a030e:	831a      	strh	r2, [r3, #24]
 80a0310:	4770      	bx	lr
 80a0312:	bf00      	nop
 80a0314:	200084a0 	.word	0x200084a0

080a0318 <_ZN4Pins10resetResetEv.isra.6>:
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0318:	231c      	movs	r3, #28
 80a031a:	4358      	muls	r0, r3
 80a031c:	4b03      	ldr	r3, [pc, #12]	; (80a032c <_ZN4Pins10resetResetEv.isra.6+0x14>)
 80a031e:	681b      	ldr	r3, [r3, #0]
 80a0320:	181a      	adds	r2, r3, r0
 80a0322:	8892      	ldrh	r2, [r2, #4]
 80a0324:	581b      	ldr	r3, [r3, r0]
 80a0326:	835a      	strh	r2, [r3, #26]
 80a0328:	4770      	bx	lr
 80a032a:	bf00      	nop
 80a032c:	200084a0 	.word	0x200084a0

080a0330 <_ZN3LCDC1E6Region4Pins>:
    }
}

LCD::LCD(Region region, Pins pins) : _drawRegion(region), _pins(pins){
 80a0330:	b082      	sub	sp, #8
 80a0332:	b513      	push	{r0, r1, r4, lr}
 80a0334:	9305      	str	r3, [sp, #20]
 80a0336:	466b      	mov	r3, sp
 80a0338:	4604      	mov	r4, r0
 80a033a:	e88d 0006 	stmia.w	sp, {r1, r2}
 80a033e:	cb03      	ldmia	r3!, {r0, r1}
 80a0340:	ab04      	add	r3, sp, #16
 80a0342:	6020      	str	r0, [r4, #0]
 80a0344:	f853 0f04 	ldr.w	r0, [r3, #4]!
 80a0348:	6061      	str	r1, [r4, #4]
 80a034a:	60a0      	str	r0, [r4, #8]
    _ready = false;
}
 80a034c:	4620      	mov	r0, r4
        TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
        isrActivated = true;
    }
}

LCD::LCD(Region region, Pins pins) : _drawRegion(region), _pins(pins){
 80a034e:	889b      	ldrh	r3, [r3, #4]
 80a0350:	81a3      	strh	r3, [r4, #12]
    _ready = false;
 80a0352:	2300      	movs	r3, #0
 80a0354:	73a3      	strb	r3, [r4, #14]
}
 80a0356:	b002      	add	sp, #8
 80a0358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a035c:	b002      	add	sp, #8
 80a035e:	4770      	bx	lr

080a0360 <_ZN3LCDD1Ev>:

LCD::~LCD(void) {}
 80a0360:	4770      	bx	lr

080a0362 <_ZN3LCD5clearEj>:
        SPI.transfer((void*) _framebuffer, NULL, lcd_pixels * 2, NULL);
        _pins.endTransmission();
    }
}

void LCD::clear(unsigned int color){
 80a0362:	f100 030e 	add.w	r3, r0, #14
 80a0366:	f500 4004 	add.w	r0, r0, #33792	; 0x8400
 80a036a:	3016      	adds	r0, #22
    unsigned int i = 0;
    while(i < lcd_pixels) {
        _framebuffer[i] = color;
 80a036c:	f823 1f02 	strh.w	r1, [r3, #2]!
    }
}

void LCD::clear(unsigned int color){
    unsigned int i = 0;
    while(i < lcd_pixels) {
 80a0370:	4283      	cmp	r3, r0
 80a0372:	d1fb      	bne.n	80a036c <_ZN3LCD5clearEj+0xa>
        _framebuffer[i] = color;
        i++;
    }
}
 80a0374:	4770      	bx	lr
	...

080a0378 <_ZN3LCD19configureInterruptsEv>:
    SPI.begin();
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0); 
}

void LCD::configureInterrupts(){
 80a0378:	b570      	push	{r4, r5, r6, lr}
    // using NVIC & TIM data structures
    NVIC_InitTypeDef nvicStructure;
    TIM_TimeBaseInitTypeDef timerInitStructure;
    TIM_TypeDef* TIMx;
    TIMx = TIM5;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80a037a:	2101      	movs	r1, #1
    SPI.begin();
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0); 
}

void LCD::configureInterrupts(){
 80a037c:	b088      	sub	sp, #32
 80a037e:	4606      	mov	r6, r0
    // using NVIC & TIM data structures
    NVIC_InitTypeDef nvicStructure;
    TIM_TimeBaseInitTypeDef timerInitStructure;
    TIM_TypeDef* TIMx;
    TIMx = TIM5;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 80a0380:	2008      	movs	r0, #8
 80a0382:	f7ff fecd 	bl	80a0120 <RCC_APB1PeriphClockCmd>

    // enable timer interrupt
    nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80a0386:	2401      	movs	r4, #1
    TIM_TypeDef* TIMx;
    TIMx = TIM5;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);

    // enable timer interrupt
    nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a0388:	2332      	movs	r3, #50	; 0x32
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a038a:	2500      	movs	r5, #0
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvicStructure);
 80a038c:	4668      	mov	r0, sp
    TIM_TypeDef* TIMx;
    TIMx = TIM5;
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);

    // enable timer interrupt
    nvicStructure.NVIC_IRQChannel = TIM5_IRQn;
 80a038e:	f88d 3000 	strb.w	r3, [sp]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80a0392:	f88d 5001 	strb.w	r5, [sp, #1]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 80a0396:	f88d 4002 	strb.w	r4, [sp, #2]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 80a039a:	f88d 4003 	strb.w	r4, [sp, #3]
    NVIC_Init(&nvicStructure);
 80a039e:	f7ff fe89 	bl	80a00b4 <NVIC_Init>

    // set the timer frequency
    timerInitStructure.TIM_Prescaler      = 1;
    timerInitStructure.TIM_CounterMode    = TIM_CounterMode_Up;
    timerInitStructure.TIM_Period         = 1200;
 80a03a2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80a03a6:	9302      	str	r3, [sp, #8]
    timerInitStructure.TIM_ClockDivision  = TIM_CKD_DIV4;
    TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80a03a8:	a901      	add	r1, sp, #4

    // set the timer frequency
    timerInitStructure.TIM_Prescaler      = 1;
    timerInitStructure.TIM_CounterMode    = TIM_CounterMode_Up;
    timerInitStructure.TIM_Period         = 1200;
    timerInitStructure.TIM_ClockDivision  = TIM_CKD_DIV4;
 80a03aa:	f44f 7300 	mov.w	r3, #512	; 0x200
    TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80a03ae:	4814      	ldr	r0, [pc, #80]	; (80a0400 <_ZN3LCD19configureInterruptsEv+0x88>)

    // set the timer frequency
    timerInitStructure.TIM_Prescaler      = 1;
    timerInitStructure.TIM_CounterMode    = TIM_CounterMode_Up;
    timerInitStructure.TIM_Period         = 1200;
    timerInitStructure.TIM_ClockDivision  = TIM_CKD_DIV4;
 80a03b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&nvicStructure);

    // set the timer frequency
    timerInitStructure.TIM_Prescaler      = 1;
 80a03b4:	f8ad 4004 	strh.w	r4, [sp, #4]
    timerInitStructure.TIM_CounterMode    = TIM_CounterMode_Up;
 80a03b8:	f8ad 5006 	strh.w	r5, [sp, #6]
    timerInitStructure.TIM_Period         = 1200;
    timerInitStructure.TIM_ClockDivision  = TIM_CKD_DIV4;
    TIM_TimeBaseInit(TIMx, &timerInitStructure);
 80a03bc:	f7ff febc 	bl	80a0138 <TIM_TimeBaseInit>
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a03c0:	4b10      	ldr	r3, [pc, #64]	; (80a0404 <_ZN3LCD19configureInterruptsEv+0x8c>)

    // attach interrupt
    attachSystemInterrupt(SysInterrupt_TIM5_IRQ, timerISRoutine);
 80a03c2:	a904      	add	r1, sp, #16
 80a03c4:	9304      	str	r3, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a03c6:	4b10      	ldr	r3, [pc, #64]	; (80a0408 <_ZN3LCD19configureInterruptsEv+0x90>)
 80a03c8:	201c      	movs	r0, #28
 80a03ca:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80a03cc:	4b0f      	ldr	r3, [pc, #60]	; (80a040c <_ZN3LCD19configureInterruptsEv+0x94>)
 80a03ce:	9306      	str	r3, [sp, #24]
 80a03d0:	f000 fc30 	bl	80a0c34 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a03d4:	9b06      	ldr	r3, [sp, #24]
 80a03d6:	b11b      	cbz	r3, 80a03e0 <_ZN3LCD19configureInterruptsEv+0x68>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a03d8:	a904      	add	r1, sp, #16
 80a03da:	2203      	movs	r2, #3
 80a03dc:	4608      	mov	r0, r1
 80a03de:	4798      	blx	r3

    // make it go
    TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
 80a03e0:	2201      	movs	r2, #1
 80a03e2:	4611      	mov	r1, r2
 80a03e4:	4806      	ldr	r0, [pc, #24]	; (80a0400 <_ZN3LCD19configureInterruptsEv+0x88>)
 80a03e6:	f7ff fef1 	bl	80a01cc <TIM_ITConfig>
    TIM_Cmd(TIMx, ENABLE);
 80a03ea:	2101      	movs	r1, #1
 80a03ec:	4804      	ldr	r0, [pc, #16]	; (80a0400 <_ZN3LCD19configureInterruptsEv+0x88>)
 80a03ee:	f7ff fee1 	bl	80a01b4 <TIM_Cmd>

    clear(0x00);
 80a03f2:	2100      	movs	r1, #0
 80a03f4:	4630      	mov	r0, r6
 80a03f6:	f7ff ffb4 	bl	80a0362 <_ZN3LCD5clearEj>
}
 80a03fa:	b008      	add	sp, #32
 80a03fc:	bd70      	pop	{r4, r5, r6, pc}
 80a03fe:	bf00      	nop
 80a0400:	40000c00 	.word	0x40000c00
 80a0404:	080a02d5 	.word	0x080a02d5
 80a0408:	080a02b7 	.word	0x080a02b7
 80a040c:	080a02bb 	.word	0x080a02bb

080a0410 <_ZN3LCD16sendResetCommandEv>:

void LCD::sendResetCommand(){
 80a0410:	b510      	push	{r4, lr}
 80a0412:	4604      	mov	r4, r0
    _pins.resetReset(); delay(100);
 80a0414:	8980      	ldrh	r0, [r0, #12]
 80a0416:	f7ff ff7f 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
 80a041a:	2064      	movs	r0, #100	; 0x64
 80a041c:	f000 fba4 	bl	80a0b68 <delay>
    _pins.setReset(); delay(50);
 80a0420:	89a0      	ldrh	r0, [r4, #12]
 80a0422:	f7ff ff6d 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>
}
 80a0426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clear(0x00);
}

void LCD::sendResetCommand(){
    _pins.resetReset(); delay(100);
    _pins.setReset(); delay(50);
 80a042a:	2032      	movs	r0, #50	; 0x32
 80a042c:	f000 bb9c 	b.w	80a0b68 <delay>

080a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a0430:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a0432:	4d0b      	ldr	r5, [pc, #44]	; (80a0460 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a0434:	6829      	ldr	r1, [r5, #0]
 80a0436:	f011 0401 	ands.w	r4, r1, #1
 80a043a:	d10f      	bne.n	80a045c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a043c:	4628      	mov	r0, r5
 80a043e:	f7ff fe30 	bl	80a00a2 <__cxa_guard_acquire>
 80a0442:	b158      	cbz	r0, 80a045c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0444:	4621      	mov	r1, r4
 80a0446:	4807      	ldr	r0, [pc, #28]	; (80a0464 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0448:	f000 fd51 	bl	80a0eee <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a044c:	4628      	mov	r0, r5
 80a044e:	f7ff fe2d 	bl	80a00ac <__cxa_guard_release>
 80a0452:	4a05      	ldr	r2, [pc, #20]	; (80a0468 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a0454:	4905      	ldr	r1, [pc, #20]	; (80a046c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a0456:	4803      	ldr	r0, [pc, #12]	; (80a0464 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0458:	f001 f938 	bl	80a16cc <__aeabi_atexit>
        return instance;
    }
 80a045c:	4801      	ldr	r0, [pc, #4]	; (80a0464 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a045e:	bd38      	pop	{r3, r4, r5, pc}
 80a0460:	2000848c 	.word	0x2000848c
 80a0464:	20008490 	.word	0x20008490
 80a0468:	20000068 	.word	0x20000068
 80a046c:	080a02f1 	.word	0x080a02f1

080a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a0470:	b510      	push	{r4, lr}
 80a0472:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a0474:	f7ff ffdc 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0478:	4621      	mov	r1, r4
    }
 80a047a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a047e:	f000 bde1 	b.w	80a1044 <_ZN8SPIClass8transferEh>

080a0482 <_ZN3LCD15writeOnRegisterEhj>:
    _pins.configureAsCommand();
    SPI.transfer(0x22);
    _pins.endTransmission();
}

void LCD::writeOnRegister(unsigned char index, unsigned int data){
 80a0482:	b538      	push	{r3, r4, r5, lr}
 80a0484:	4604      	mov	r4, r0

    // write index
    _pins.beginTransmission();
 80a0486:	8900      	ldrh	r0, [r0, #8]
    _pins.configureAsCommand();
    SPI.transfer(0x22);
    _pins.endTransmission();
}

void LCD::writeOnRegister(unsigned char index, unsigned int data){
 80a0488:	4615      	mov	r5, r2

    // write index
    _pins.beginTransmission();
 80a048a:	f7ff ff45 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    _pins.configureAsCommand();
 80a048e:	8960      	ldrh	r0, [r4, #10]
 80a0490:	f7ff ff42 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    SPI.transfer(index);
 80a0494:	4608      	mov	r0, r1
 80a0496:	f7ff ffeb 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    _pins.endTransmission();
 80a049a:	8920      	ldrh	r0, [r4, #8]
 80a049c:	f7ff ff30 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>

    // write data
    _pins.beginTransmission();
 80a04a0:	8920      	ldrh	r0, [r4, #8]
 80a04a2:	f7ff ff39 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    _pins.configureAsData();
 80a04a6:	8960      	ldrh	r0, [r4, #10]
 80a04a8:	f7ff ff2a 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>
    SPI.transfer(data >> 8);
 80a04ac:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80a04b0:	f7ff ffde 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    SPI.transfer(data);
 80a04b4:	b2e8      	uxtb	r0, r5
 80a04b6:	f7ff ffdb 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    _pins.endTransmission();
 80a04ba:	8920      	ldrh	r0, [r4, #8]
}
 80a04bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // write data
    _pins.beginTransmission();
    _pins.configureAsData();
    SPI.transfer(data >> 8);
    SPI.transfer(data);
    _pins.endTransmission();
 80a04c0:	f7ff bf1e 	b.w	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>

080a04c4 <_ZN3LCD19sendStartupSequenceEv>:
void LCD::sendResetCommand(){
    _pins.resetReset(); delay(100);
    _pins.setReset(); delay(50);
}

void LCD::sendStartupSequence(){
 80a04c4:	b510      	push	{r4, lr}
 80a04c6:	4604      	mov	r4, r0

    sendResetCommand(); // Reset before LCD Init.
 80a04c8:	f7ff ffa2 	bl	80a0410 <_ZN3LCD16sendResetCommandEv>

    writeOnRegister(0x10,0x2F8E); /* power control 1 */
 80a04cc:	4620      	mov	r0, r4
 80a04ce:	f642 728e 	movw	r2, #12174	; 0x2f8e
 80a04d2:	2110      	movs	r1, #16
 80a04d4:	f7ff ffd5 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x11,0x000C); /* power control 2 */
 80a04d8:	4620      	mov	r0, r4
 80a04da:	220c      	movs	r2, #12
 80a04dc:	2111      	movs	r1, #17
 80a04de:	f7ff ffd0 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x07,0x0021); /* display control */
 80a04e2:	4620      	mov	r0, r4
 80a04e4:	2221      	movs	r2, #33	; 0x21
 80a04e6:	2107      	movs	r1, #7
 80a04e8:	f7ff ffcb 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x28,0x0006); /* vcom OTP */
 80a04ec:	4620      	mov	r0, r4
 80a04ee:	2206      	movs	r2, #6
 80a04f0:	2128      	movs	r1, #40	; 0x28
 80a04f2:	f7ff ffc6 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x28,0x0005);
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	2205      	movs	r2, #5
 80a04fa:	2128      	movs	r1, #40	; 0x28
 80a04fc:	f7ff ffc1 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x27,0x057F); /* further bias current setting */
 80a0500:	4620      	mov	r0, r4
 80a0502:	f240 527f 	movw	r2, #1407	; 0x57f
 80a0506:	2127      	movs	r1, #39	; 0x27
 80a0508:	f7ff ffbb 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x29,0x89A1); /* vcom OTP */
 80a050c:	4620      	mov	r0, r4
 80a050e:	f648 12a1 	movw	r2, #35233	; 0x89a1
 80a0512:	2129      	movs	r1, #41	; 0x29
 80a0514:	f7ff ffb5 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x00,0x0001); /* OSC en */
 80a0518:	2201      	movs	r2, #1
 80a051a:	2100      	movs	r1, #0
 80a051c:	4620      	mov	r0, r4
 80a051e:	f7ff ffb0 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    delay(100);
 80a0522:	2064      	movs	r0, #100	; 0x64
 80a0524:	f000 fb20 	bl	80a0b68 <delay>

    writeOnRegister(0x29,0x80B0); /* vcom OTP */
 80a0528:	f248 02b0 	movw	r2, #32944	; 0x80b0
 80a052c:	2129      	movs	r1, #41	; 0x29
 80a052e:	4620      	mov	r0, r4
 80a0530:	f7ff ffa7 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    delay(30);
 80a0534:	201e      	movs	r0, #30
 80a0536:	f000 fb17 	bl	80a0b68 <delay>

    writeOnRegister(0x29,0xFFFE); /* vcom OTP */
 80a053a:	4620      	mov	r0, r4
 80a053c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80a0540:	2129      	movs	r1, #41	; 0x29
 80a0542:	f7ff ff9e 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x07,0x0023); /* display control */
 80a0546:	2223      	movs	r2, #35	; 0x23
 80a0548:	2107      	movs	r1, #7
 80a054a:	4620      	mov	r0, r4
 80a054c:	f7ff ff99 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    delay(30);
 80a0550:	201e      	movs	r0, #30
 80a0552:	f000 fb09 	bl	80a0b68 <delay>

    writeOnRegister(0x07,0x0233); /* display control */
 80a0556:	4620      	mov	r0, r4
 80a0558:	f240 2233 	movw	r2, #563	; 0x233
 80a055c:	2107      	movs	r1, #7
 80a055e:	f7ff ff90 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x01,0x2183); /* driver output control, REV, TB, RGB */
 80a0562:	4620      	mov	r0, r4
 80a0564:	f242 1283 	movw	r2, #8579	; 0x2183
 80a0568:	2101      	movs	r1, #1
 80a056a:	f7ff ff8a 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x03,0x6830); /* entry mode, 65K, ram, ID0 */
 80a056e:	4620      	mov	r0, r4
 80a0570:	f646 0230 	movw	r2, #26672	; 0x6830
 80a0574:	2103      	movs	r1, #3
 80a0576:	f7ff ff84 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x2F,0xFFFF); /* 2A ~ 2F, test */
 80a057a:	4620      	mov	r0, r4
 80a057c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0580:	212f      	movs	r1, #47	; 0x2f
 80a0582:	f7ff ff7e 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x2C,0x8000);
 80a0586:	4620      	mov	r0, r4
 80a0588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80a058c:	212c      	movs	r1, #44	; 0x2c
 80a058e:	f7ff ff78 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x27,0x0570);
 80a0592:	4620      	mov	r0, r4
 80a0594:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80a0598:	2127      	movs	r1, #39	; 0x27
 80a059a:	f7ff ff72 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x02,0x0300); /* driving wave form control */
 80a059e:	4620      	mov	r0, r4
 80a05a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80a05a4:	2102      	movs	r1, #2
 80a05a6:	f7ff ff6c 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x0B,0x580C); /* frame cycle control */
 80a05aa:	4620      	mov	r0, r4
 80a05ac:	f645 020c 	movw	r2, #22540	; 0x580c
 80a05b0:	210b      	movs	r1, #11
 80a05b2:	f7ff ff66 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x12,0x0609); /* power control 3 */
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	f240 6209 	movw	r2, #1545	; 0x609
 80a05bc:	2112      	movs	r1, #18
 80a05be:	f7ff ff60 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    writeOnRegister(0x13,0x3100); /* power control 4 */
 80a05c2:	4620      	mov	r0, r4
 80a05c4:	f44f 5244 	mov.w	r2, #12544	; 0x3100
 80a05c8:	2113      	movs	r1, #19
 80a05ca:	f7ff ff5a 	bl	80a0482 <_ZN3LCD15writeOnRegisterEhj>
    delay(10);
}
 80a05ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeOnRegister(0x27,0x0570);
    writeOnRegister(0x02,0x0300); /* driving wave form control */
    writeOnRegister(0x0B,0x580C); /* frame cycle control */
    writeOnRegister(0x12,0x0609); /* power control 3 */
    writeOnRegister(0x13,0x3100); /* power control 4 */
    delay(10);
 80a05d2:	200a      	movs	r0, #10
 80a05d4:	f000 bac8 	b.w	80a0b68 <delay>

080a05d8 <_ZN3LCD20writeTupleOnRegisterEhhh>:
    SPI.transfer(data >> 8);
    SPI.transfer(data);
    _pins.endTransmission();
}

void LCD::writeTupleOnRegister(unsigned char index, unsigned char A, unsigned char B){
 80a05d8:	b570      	push	{r4, r5, r6, lr}
 80a05da:	4604      	mov	r4, r0

    // write index
    _pins.beginTransmission();
 80a05dc:	8900      	ldrh	r0, [r0, #8]
    SPI.transfer(data >> 8);
    SPI.transfer(data);
    _pins.endTransmission();
}

void LCD::writeTupleOnRegister(unsigned char index, unsigned char A, unsigned char B){
 80a05de:	4616      	mov	r6, r2
 80a05e0:	461d      	mov	r5, r3

    // write index
    _pins.beginTransmission();
 80a05e2:	f7ff fe99 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    _pins.configureAsCommand();
 80a05e6:	8960      	ldrh	r0, [r4, #10]
 80a05e8:	f7ff fe96 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    SPI.transfer(index);
 80a05ec:	4608      	mov	r0, r1
 80a05ee:	f7ff ff3f 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    _pins.endTransmission();
 80a05f2:	8920      	ldrh	r0, [r4, #8]
 80a05f4:	f7ff fe84 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>

    // write data A
    _pins.beginTransmission();
 80a05f8:	8920      	ldrh	r0, [r4, #8]
 80a05fa:	f7ff fe8d 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    _pins.configureAsData();
 80a05fe:	8960      	ldrh	r0, [r4, #10]
 80a0600:	f7ff fe7e 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>
    SPI.transfer(A);
 80a0604:	4630      	mov	r0, r6
 80a0606:	f7ff ff33 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    SPI.transfer(B);
 80a060a:	4628      	mov	r0, r5
 80a060c:	f7ff ff30 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    _pins.endTransmission();
 80a0610:	8920      	ldrh	r0, [r4, #8]
 80a0612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    // write data A
    _pins.beginTransmission();
    _pins.configureAsData();
    SPI.transfer(A);
    SPI.transfer(B);
    _pins.endTransmission();
 80a0616:	f7ff be73 	b.w	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>

080a061a <_ZN3LCD19configureDrawRegionEv>:
    writeOnRegister(0x12,0x0609); /* power control 3 */
    writeOnRegister(0x13,0x3100); /* power control 4 */
    delay(10);
}

void LCD::configureDrawRegion(){
 80a061a:	b510      	push	{r4, lr}
 80a061c:	4604      	mov	r4, r0

    writeTupleOnRegister(0x44, 
 80a061e:	7801      	ldrb	r1, [r0, #0]
        _drawRegion.origin.x + _drawRegion.size.width + 1,
        _drawRegion.origin.x + 2
    );
 80a0620:	7902      	ldrb	r2, [r0, #4]
 80a0622:	1c8b      	adds	r3, r1, #2
 80a0624:	440a      	add	r2, r1
 80a0626:	3201      	adds	r2, #1
 80a0628:	b2db      	uxtb	r3, r3
 80a062a:	b2d2      	uxtb	r2, r2
 80a062c:	2144      	movs	r1, #68	; 0x44
 80a062e:	f7ff ffd3 	bl	80a05d8 <_ZN3LCD20writeTupleOnRegisterEhhh>

    writeTupleOnRegister(0x45, 
 80a0632:	78a1      	ldrb	r1, [r4, #2]
        _drawRegion.origin.y + _drawRegion.size.height + 1,
        _drawRegion.origin.y + 2
    );
 80a0634:	79a2      	ldrb	r2, [r4, #6]
 80a0636:	1c8b      	adds	r3, r1, #2
 80a0638:	440a      	add	r2, r1
 80a063a:	3201      	adds	r2, #1
 80a063c:	4620      	mov	r0, r4
 80a063e:	b2db      	uxtb	r3, r3
 80a0640:	b2d2      	uxtb	r2, r2
 80a0642:	2145      	movs	r1, #69	; 0x45
 80a0644:	f7ff ffc8 	bl	80a05d8 <_ZN3LCD20writeTupleOnRegisterEhhh>

    writeTupleOnRegister(0x21, 
        _drawRegion.origin.x + 2,
        _drawRegion.origin.y + 2
    );
 80a0648:	78a3      	ldrb	r3, [r4, #2]
 80a064a:	7822      	ldrb	r2, [r4, #0]
 80a064c:	3302      	adds	r3, #2
 80a064e:	3202      	adds	r2, #2
 80a0650:	b2db      	uxtb	r3, r3
 80a0652:	b2d2      	uxtb	r2, r2
 80a0654:	2121      	movs	r1, #33	; 0x21
 80a0656:	4620      	mov	r0, r4
 80a0658:	f7ff ffbe 	bl	80a05d8 <_ZN3LCD20writeTupleOnRegisterEhhh>
  
    _pins.beginTransmission();
 80a065c:	8920      	ldrh	r0, [r4, #8]
 80a065e:	f7ff fe5b 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    _pins.configureAsCommand();
 80a0662:	8960      	ldrh	r0, [r4, #10]
 80a0664:	f7ff fe58 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
    SPI.transfer(0x22);
 80a0668:	2022      	movs	r0, #34	; 0x22
 80a066a:	f7ff ff01 	bl	80a0470 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.14>
    _pins.endTransmission();
 80a066e:	8920      	ldrh	r0, [r4, #8]
}
 80a0670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    );
  
    _pins.beginTransmission();
    _pins.configureAsCommand();
    SPI.transfer(0x22);
    _pins.endTransmission();
 80a0674:	f7ff be44 	b.w	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>

080a0678 <_ZN3LCD4loopEv>:
    sendStartupSequence();
    configureInterrupts();
    _ready = true;
}

void LCD::loop(){
 80a0678:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!isrActivated) return;
 80a067a:	4b14      	ldr	r3, [pc, #80]	; (80a06cc <_ZN3LCD4loopEv+0x54>)
    sendStartupSequence();
    configureInterrupts();
    _ready = true;
}

void LCD::loop(){
 80a067c:	4605      	mov	r5, r0
    if (!isrActivated) return;
 80a067e:	781a      	ldrb	r2, [r3, #0]
 80a0680:	b312      	cbz	r2, 80a06c8 <_ZN3LCD4loopEv+0x50>
    isrActivated = false;
 80a0682:	2400      	movs	r4, #0
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a0684:	4621      	mov	r1, r4
 80a0686:	4620      	mov	r0, r4
 80a0688:	701c      	strb	r4, [r3, #0]
 80a068a:	f000 f887 	bl	80a079c <os_thread_scheduling>

    SINGLE_THREADED_BLOCK(){
        configureDrawRegion();
 80a068e:	4628      	mov	r0, r5
 80a0690:	f7ff ffc3 	bl	80a061a <_ZN3LCD19configureDrawRegionEv>
        _pins.beginTransmission();
 80a0694:	8928      	ldrh	r0, [r5, #8]
 80a0696:	f7ff fe3f 	bl	80a0318 <_ZN4Pins10resetResetEv.isra.6>
        _pins.configureAsData();
 80a069a:	8968      	ldrh	r0, [r5, #10]
 80a069c:	f7ff fe30 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>
    }
    void transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 80a06a0:	f7ff fec6 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a06a4:	f105 0110 	add.w	r1, r5, #16
 80a06a8:	f248 4308 	movw	r3, #33800	; 0x8408
 80a06ac:	4622      	mov	r2, r4
 80a06ae:	9400      	str	r4, [sp, #0]
 80a06b0:	f000 fcce 	bl	80a1050 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        SPI.transfer((void*) _framebuffer, NULL, lcd_pixels * 2, NULL);
        _pins.endTransmission();
 80a06b4:	8928      	ldrh	r0, [r5, #8]
 80a06b6:	f7ff fe23 	bl	80a0300 <_ZN4Pins15configureAsDataEv.isra.3>
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a06ba:	4621      	mov	r1, r4
 80a06bc:	2001      	movs	r0, #1
    }
}
 80a06be:	b003      	add	sp, #12
 80a06c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80a06c4:	f000 b86a 	b.w	80a079c <os_thread_scheduling>
 80a06c8:	b003      	add	sp, #12
 80a06ca:	bd30      	pop	{r4, r5, pc}
 80a06cc:	2000849c 	.word	0x2000849c

080a06d0 <_ZN3LCD12configureSPIEv>:
        _framebuffer[i] = color;
        i++;
    }
}

void LCD::configureSPI(){
 80a06d0:	b508      	push	{r3, lr}
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
 80a06d2:	f7ff fead 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a06d6:	2100      	movs	r1, #0
 80a06d8:	f000 fc90 	bl	80a0ffc <_ZN8SPIClass15setClockDividerEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
 80a06dc:	f7ff fea8 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a06e0:	f000 fc14 	bl	80a0f0c <_ZN8SPIClass5beginEv>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 80a06e4:	f7ff fea4 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a06e8:	2101      	movs	r1, #1
 80a06ea:	f000 fc1f 	bl	80a0f2c <_ZN8SPIClass11setBitOrderEh>
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 80a06ee:	f7ff fe9f 	bl	80a0430 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    SPI.setClockDivider(SPI_CLOCK_DIV2);
    SPI.begin();
    SPI.setBitOrder(MSBFIRST);
    SPI.setDataMode(SPI_MODE0); 
}
 80a06f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a06f6:	2100      	movs	r1, #0
 80a06f8:	f000 bc28 	b.w	80a0f4c <_ZN8SPIClass11setDataModeEh>

080a06fc <_ZN3LCD5setupEv>:
    _ready = false;
}

LCD::~LCD(void) {}

void LCD::setup(){
 80a06fc:	b510      	push	{r4, lr}
    if(_ready) return;
 80a06fe:	7b83      	ldrb	r3, [r0, #14]
    _ready = false;
}

LCD::~LCD(void) {}

void LCD::setup(){
 80a0700:	4604      	mov	r4, r0
    if(_ready) return;
 80a0702:	b963      	cbnz	r3, 80a071e <_ZN3LCD5setupEv+0x22>
    configureSPI();
 80a0704:	f7ff ffe4 	bl	80a06d0 <_ZN3LCD12configureSPIEv>
    sendResetCommand();
 80a0708:	4620      	mov	r0, r4
 80a070a:	f7ff fe81 	bl	80a0410 <_ZN3LCD16sendResetCommandEv>
    sendStartupSequence();
 80a070e:	4620      	mov	r0, r4
 80a0710:	f7ff fed8 	bl	80a04c4 <_ZN3LCD19sendStartupSequenceEv>
    configureInterrupts();
 80a0714:	4620      	mov	r0, r4
 80a0716:	f7ff fe2f 	bl	80a0378 <_ZN3LCD19configureInterruptsEv>
    _ready = true;
 80a071a:	2301      	movs	r3, #1
 80a071c:	73a3      	strb	r3, [r4, #14]
 80a071e:	bd10      	pop	{r4, pc}

080a0720 <_GLOBAL__sub_I_isrActivated>:
    _pins.beginTransmission();
    _pins.configureAsData();
    SPI.transfer(A);
    SPI.transfer(B);
    _pins.endTransmission();
 80a0720:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0722:	f000 f873 	bl	80a080c <HAL_Pin_Map>
 80a0726:	4b01      	ldr	r3, [pc, #4]	; (80a072c <_GLOBAL__sub_I_isrActivated+0xc>)
 80a0728:	6018      	str	r0, [r3, #0]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	200084a0 	.word	0x200084a0

080a0730 <_ZN4Pins15configureAsDataEv.isra.1>:
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0730:	231c      	movs	r3, #28
 80a0732:	4358      	muls	r0, r3
 80a0734:	4b03      	ldr	r3, [pc, #12]	; (80a0744 <_ZN4Pins15configureAsDataEv.isra.1+0x14>)
 80a0736:	681b      	ldr	r3, [r3, #0]
 80a0738:	181a      	adds	r2, r3, r0
 80a073a:	8892      	ldrh	r2, [r2, #4]
 80a073c:	581b      	ldr	r3, [r3, r0]
 80a073e:	831a      	strh	r2, [r3, #24]
 80a0740:	4770      	bx	lr
 80a0742:	bf00      	nop
 80a0744:	200084a4 	.word	0x200084a4

080a0748 <_ZN4PinsC1Ev>:
#include "pins.h"

Pins::Pins(){
 80a0748:	b510      	push	{r4, lr}
 80a074a:	4604      	mov	r4, r0
    chip_select     = A2;
    data_command    = A1;
 80a074c:	230b      	movs	r3, #11
#include "pins.h"

Pins::Pins(){
    chip_select     = A2;
 80a074e:	200c      	movs	r0, #12
    data_command    = A1;
 80a0750:	8063      	strh	r3, [r4, #2]
    reset           = A0;
 80a0752:	230a      	movs	r3, #10
 80a0754:	80a3      	strh	r3, [r4, #4]
#include "pins.h"

Pins::Pins(){
    chip_select     = A2;
 80a0756:	8020      	strh	r0, [r4, #0]
    data_command    = A1;
    reset           = A0;

    pinMode(chip_select,  OUTPUT);
 80a0758:	2101      	movs	r1, #1
 80a075a:	f000 ff4d 	bl	80a15f8 <pinMode>
    pinMode(reset,        OUTPUT);
 80a075e:	88a0      	ldrh	r0, [r4, #4]
 80a0760:	2101      	movs	r1, #1
 80a0762:	f000 ff49 	bl	80a15f8 <pinMode>
    pinMode(data_command, OUTPUT); 
 80a0766:	8860      	ldrh	r0, [r4, #2]
 80a0768:	2101      	movs	r1, #1
 80a076a:	f000 ff45 	bl	80a15f8 <pinMode>
    pinMode(D7, OUTPUT); 
 80a076e:	2101      	movs	r1, #1
 80a0770:	2007      	movs	r0, #7
 80a0772:	f000 ff41 	bl	80a15f8 <pinMode>

    endTransmission();
 80a0776:	8820      	ldrh	r0, [r4, #0]
 80a0778:	f7ff ffda 	bl	80a0730 <_ZN4Pins15configureAsDataEv.isra.1>
    configureAsData();
 80a077c:	8860      	ldrh	r0, [r4, #2]
 80a077e:	f7ff ffd7 	bl	80a0730 <_ZN4Pins15configureAsDataEv.isra.1>
    setReset();
 80a0782:	88a0      	ldrh	r0, [r4, #4]
 80a0784:	f7ff ffd4 	bl	80a0730 <_ZN4Pins15configureAsDataEv.isra.1>
}
 80a0788:	4620      	mov	r0, r4
 80a078a:	bd10      	pop	{r4, pc}

080a078c <_GLOBAL__sub_I__ZN4PinsC2Ev>:
 80a078c:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a078e:	f000 f83d 	bl	80a080c <HAL_Pin_Map>
 80a0792:	4b01      	ldr	r3, [pc, #4]	; (80a0798 <_GLOBAL__sub_I__ZN4PinsC2Ev+0xc>)
 80a0794:	6018      	str	r0, [r3, #0]
 80a0796:	bd08      	pop	{r3, pc}
 80a0798:	200084a4 	.word	0x200084a4

080a079c <os_thread_scheduling>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a079c:	b508      	push	{r3, lr}
 80a079e:	4b02      	ldr	r3, [pc, #8]	; (80a07a8 <os_thread_scheduling+0xc>)
 80a07a0:	681b      	ldr	r3, [r3, #0]
 80a07a2:	69db      	ldr	r3, [r3, #28]
 80a07a4:	9301      	str	r3, [sp, #4]
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	080601d0 	.word	0x080601d0

080a07ac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a07ac:	b508      	push	{r3, lr}
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <os_mutex_recursive_create+0xc>)
 80a07b0:	681b      	ldr	r3, [r3, #0]
 80a07b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a07b4:	9301      	str	r3, [sp, #4]
 80a07b6:	bd08      	pop	{r3, pc}
 80a07b8:	080601d0 	.word	0x080601d0

080a07bc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a07bc:	b508      	push	{r3, lr}
 80a07be:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <os_mutex_recursive_destroy+0xc>)
 80a07c0:	681b      	ldr	r3, [r3, #0]
 80a07c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a07c4:	9301      	str	r3, [sp, #4]
 80a07c6:	bd08      	pop	{r3, pc}
 80a07c8:	080601d0 	.word	0x080601d0

080a07cc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a07cc:	b508      	push	{r3, lr}
 80a07ce:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <os_mutex_recursive_lock+0xc>)
 80a07d0:	681b      	ldr	r3, [r3, #0]
 80a07d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a07d4:	9301      	str	r3, [sp, #4]
 80a07d6:	bd08      	pop	{r3, pc}
 80a07d8:	080601d0 	.word	0x080601d0

080a07dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a07dc:	b508      	push	{r3, lr}
 80a07de:	4b02      	ldr	r3, [pc, #8]	; (80a07e8 <os_mutex_recursive_unlock+0xc>)
 80a07e0:	681b      	ldr	r3, [r3, #0]
 80a07e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a07e4:	9301      	str	r3, [sp, #4]
 80a07e6:	bd08      	pop	{r3, pc}
 80a07e8:	080601d0 	.word	0x080601d0

080a07ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a07ec:	b508      	push	{r3, lr}
 80a07ee:	4b02      	ldr	r3, [pc, #8]	; (80a07f8 <HAL_RNG_GetRandomNumber+0xc>)
 80a07f0:	681b      	ldr	r3, [r3, #0]
 80a07f2:	685b      	ldr	r3, [r3, #4]
 80a07f4:	9301      	str	r3, [sp, #4]
 80a07f6:	bd08      	pop	{r3, pc}
 80a07f8:	0806019c 	.word	0x0806019c

080a07fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a07fc:	b508      	push	{r3, lr}
 80a07fe:	4b02      	ldr	r3, [pc, #8]	; (80a0808 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0800:	681b      	ldr	r3, [r3, #0]
 80a0802:	695b      	ldr	r3, [r3, #20]
 80a0804:	9301      	str	r3, [sp, #4]
 80a0806:	bd08      	pop	{r3, pc}
 80a0808:	0806019c 	.word	0x0806019c

080a080c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <HAL_Pin_Map+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	681b      	ldr	r3, [r3, #0]
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601b0 	.word	0x080601b0

080a081c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <HAL_Pin_Mode+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	689b      	ldr	r3, [r3, #8]
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601b0 	.word	0x080601b0

080a082c <HAL_Set_System_Interrupt_Handler>:

DYNALIB_FN(13, hal_gpio, HAL_PWM_Write, void(uint16_t, uint8_t))
DYNALIB_FN(14, hal_gpio, HAL_PWM_Get_Frequency, uint16_t(uint16_t))
DYNALIB_FN(15, hal_gpio, HAL_PWM_Get_AnalogValue, uint16_t(uint16_t))

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <HAL_Set_System_Interrupt_Handler+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	080601b0 	.word	0x080601b0

080a083c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <HAL_I2C_Write_Data+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	080601ac 	.word	0x080601ac

080a084c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <HAL_I2C_Available_Data+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	080601ac 	.word	0x080601ac

080a085c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <HAL_I2C_Read_Data+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	080601ac 	.word	0x080601ac

080a086c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <HAL_I2C_Peek_Data+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	080601ac 	.word	0x080601ac

080a087c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <HAL_I2C_Flush_Data+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601ac 	.word	0x080601ac

080a088c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <HAL_I2C_Is_Enabled+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601ac 	.word	0x080601ac

080a089c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b03      	ldr	r3, [pc, #12]	; (80a08ac <HAL_I2C_Init+0x10>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a08a6:	9301      	str	r3, [sp, #4]
 80a08a8:	bd08      	pop	{r3, pc}
 80a08aa:	0000      	.short	0x0000
 80a08ac:	080601ac 	.word	0x080601ac

080a08b0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <HAL_SPI_Begin+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	681b      	ldr	r3, [r3, #0]
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601b4 	.word	0x080601b4

080a08c0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <HAL_SPI_Set_Bit_Order+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	689b      	ldr	r3, [r3, #8]
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601b4 	.word	0x080601b4

080a08d0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <HAL_SPI_Set_Data_Mode+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	68db      	ldr	r3, [r3, #12]
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601b4 	.word	0x080601b4

080a08e0 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <HAL_SPI_Set_Clock_Divider+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	691b      	ldr	r3, [r3, #16]
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601b4 	.word	0x080601b4

080a08f0 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <HAL_SPI_Send_Receive_Data+0xc>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	695b      	ldr	r3, [r3, #20]
 80a08f8:	9301      	str	r3, [sp, #4]
 80a08fa:	bd08      	pop	{r3, pc}
 80a08fc:	080601b4 	.word	0x080601b4

080a0900 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <HAL_SPI_Init+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	69db      	ldr	r3, [r3, #28]
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601b4 	.word	0x080601b4

080a0910 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <HAL_SPI_Is_Enabled+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6a1b      	ldr	r3, [r3, #32]
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601b4 	.word	0x080601b4

080a0920 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <HAL_SPI_Info+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601b4 	.word	0x080601b4

080a0930 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <HAL_SPI_DMA_Transfer+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601b4 	.word	0x080601b4

080a0940 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <HAL_SPI_DMA_Transfer_Status+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601b4 	.word	0x080601b4

080a0950 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <HAL_USART_Init+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	699b      	ldr	r3, [r3, #24]
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601c4 	.word	0x080601c4

080a0960 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_USART_Write_Data+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601c4 	.word	0x080601c4

080a0970 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_USART_Available_Data+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601c4 	.word	0x080601c4

080a0980 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <HAL_USART_Read_Data+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601c4 	.word	0x080601c4

080a0990 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_USART_Peek_Data+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601c4 	.word	0x080601c4

080a09a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_USART_Flush_Data+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c4 	.word	0x080601c4

080a09b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_USART_Is_Enabled+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c4 	.word	0x080601c4

080a09c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_USART_Available_Data_For_Write+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c4 	.word	0x080601c4

080a09d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_USB_USART_Init+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	681b      	ldr	r3, [r3, #0]
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601d8 	.word	0x080601d8

080a09e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_USB_USART_Available_Data+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	691b      	ldr	r3, [r3, #16]
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601d8 	.word	0x080601d8

080a09f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	695b      	ldr	r3, [r3, #20]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601d8 	.word	0x080601d8

080a0a00 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <HAL_USB_USART_Receive_Data+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	699b      	ldr	r3, [r3, #24]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601d8 	.word	0x080601d8

080a0a10 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <HAL_USB_USART_Send_Data+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	69db      	ldr	r3, [r3, #28]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601d8 	.word	0x080601d8

080a0a20 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <HAL_USB_USART_Flush_Data+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6a1b      	ldr	r3, [r3, #32]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601d8 	.word	0x080601d8

080a0a30 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <inet_gethostbyname+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601c0 	.word	0x080601c0

080a0a40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <set_system_mode+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	685b      	ldr	r3, [r3, #4]
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601a4 	.word	0x080601a4

080a0a50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <system_delay_ms+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	695b      	ldr	r3, [r3, #20]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601a4 	.word	0x080601a4

080a0a60 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b03      	ldr	r3, [pc, #12]	; (80a0a70 <system_ctrl_set_app_request_handler+0x10>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0a6a:	9301      	str	r3, [sp, #4]
 80a0a6c:	bd08      	pop	{r3, pc}
 80a0a6e:	0000      	.short	0x0000
 80a0a70:	080601a4 	.word	0x080601a4

080a0a74 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0a74:	b508      	push	{r3, lr}
 80a0a76:	4b03      	ldr	r3, [pc, #12]	; (80a0a84 <system_ctrl_set_result+0x10>)
 80a0a78:	681b      	ldr	r3, [r3, #0]
 80a0a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0a7e:	9301      	str	r3, [sp, #4]
 80a0a80:	bd08      	pop	{r3, pc}
 80a0a82:	0000      	.short	0x0000
 80a0a84:	080601a4 	.word	0x080601a4

080a0a88 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a88:	b508      	push	{r3, lr}
 80a0a8a:	4b02      	ldr	r3, [pc, #8]	; (80a0a94 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a8c:	681b      	ldr	r3, [r3, #0]
 80a0a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a90:	9301      	str	r3, [sp, #4]
 80a0a92:	bd08      	pop	{r3, pc}
 80a0a94:	080601cc 	.word	0x080601cc

080a0a98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a98:	b508      	push	{r3, lr}
 80a0a9a:	4b02      	ldr	r3, [pc, #8]	; (80a0aa4 <network_connect+0xc>)
 80a0a9c:	681b      	ldr	r3, [r3, #0]
 80a0a9e:	685b      	ldr	r3, [r3, #4]
 80a0aa0:	9301      	str	r3, [sp, #4]
 80a0aa2:	bd08      	pop	{r3, pc}
 80a0aa4:	080601c8 	.word	0x080601c8

080a0aa8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0aa8:	b508      	push	{r3, lr}
 80a0aaa:	4b02      	ldr	r3, [pc, #8]	; (80a0ab4 <network_connecting+0xc>)
 80a0aac:	681b      	ldr	r3, [r3, #0]
 80a0aae:	689b      	ldr	r3, [r3, #8]
 80a0ab0:	9301      	str	r3, [sp, #4]
 80a0ab2:	bd08      	pop	{r3, pc}
 80a0ab4:	080601c8 	.word	0x080601c8

080a0ab8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0ab8:	b508      	push	{r3, lr}
 80a0aba:	4b02      	ldr	r3, [pc, #8]	; (80a0ac4 <network_disconnect+0xc>)
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	68db      	ldr	r3, [r3, #12]
 80a0ac0:	9301      	str	r3, [sp, #4]
 80a0ac2:	bd08      	pop	{r3, pc}
 80a0ac4:	080601c8 	.word	0x080601c8

080a0ac8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0ac8:	b508      	push	{r3, lr}
 80a0aca:	4b02      	ldr	r3, [pc, #8]	; (80a0ad4 <network_ready+0xc>)
 80a0acc:	681b      	ldr	r3, [r3, #0]
 80a0ace:	691b      	ldr	r3, [r3, #16]
 80a0ad0:	9301      	str	r3, [sp, #4]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	080601c8 	.word	0x080601c8

080a0ad8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ad8:	b508      	push	{r3, lr}
 80a0ada:	4b02      	ldr	r3, [pc, #8]	; (80a0ae4 <network_on+0xc>)
 80a0adc:	681b      	ldr	r3, [r3, #0]
 80a0ade:	695b      	ldr	r3, [r3, #20]
 80a0ae0:	9301      	str	r3, [sp, #4]
 80a0ae2:	bd08      	pop	{r3, pc}
 80a0ae4:	080601c8 	.word	0x080601c8

080a0ae8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ae8:	b508      	push	{r3, lr}
 80a0aea:	4b02      	ldr	r3, [pc, #8]	; (80a0af4 <network_off+0xc>)
 80a0aec:	681b      	ldr	r3, [r3, #0]
 80a0aee:	699b      	ldr	r3, [r3, #24]
 80a0af0:	9301      	str	r3, [sp, #4]
 80a0af2:	bd08      	pop	{r3, pc}
 80a0af4:	080601c8 	.word	0x080601c8

080a0af8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0af8:	b508      	push	{r3, lr}
 80a0afa:	4b02      	ldr	r3, [pc, #8]	; (80a0b04 <network_listen+0xc>)
 80a0afc:	681b      	ldr	r3, [r3, #0]
 80a0afe:	69db      	ldr	r3, [r3, #28]
 80a0b00:	9301      	str	r3, [sp, #4]
 80a0b02:	bd08      	pop	{r3, pc}
 80a0b04:	080601c8 	.word	0x080601c8

080a0b08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <network_listening+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	6a1b      	ldr	r3, [r3, #32]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601c8 	.word	0x080601c8

080a0b18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <network_set_listen_timeout+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601c8 	.word	0x080601c8

080a0b28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <network_get_listen_timeout+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601c8 	.word	0x080601c8

080a0b38 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <malloc+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	681b      	ldr	r3, [r3, #0]
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601a0 	.word	0x080601a0

080a0b48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <free+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	685b      	ldr	r3, [r3, #4]
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	080601a0 	.word	0x080601a0

080a0b58 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b02      	ldr	r3, [pc, #8]	; (80a0b64 <abort+0xc>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0b60:	9301      	str	r3, [sp, #4]
 80a0b62:	bd08      	pop	{r3, pc}
 80a0b64:	080601a0 	.word	0x080601a0

080a0b68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0b68:	2100      	movs	r1, #0
 80a0b6a:	f7ff bf71 	b.w	80a0a50 <system_delay_ms>

080a0b6e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b6e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b70:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b72:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0b74:	b113      	cbz	r3, 80a0b7c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b76:	2203      	movs	r2, #3
 80a0b78:	4601      	mov	r1, r0
 80a0b7a:	4798      	blx	r3
    }
 80a0b7c:	4620      	mov	r0, r4
 80a0b7e:	bd10      	pop	{r4, pc}

080a0b80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0b80:	4770      	bx	lr

080a0b82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b84:	4606      	mov	r6, r0
 80a0b86:	4615      	mov	r5, r2
 80a0b88:	460c      	mov	r4, r1
 80a0b8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0b8c:	42bc      	cmp	r4, r7
 80a0b8e:	d006      	beq.n	80a0b9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0b90:	6833      	ldr	r3, [r6, #0]
 80a0b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0b96:	689b      	ldr	r3, [r3, #8]
 80a0b98:	4630      	mov	r0, r6
 80a0b9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0b9c:	e7f6      	b.n	80a0b8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0b9e:	4628      	mov	r0, r5
 80a0ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ba2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0ba2:	2200      	movs	r2, #0
 80a0ba4:	7c00      	ldrb	r0, [r0, #16]
 80a0ba6:	f7ff be49 	b.w	80a083c <HAL_I2C_Write_Data>

080a0baa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0baa:	2100      	movs	r1, #0
 80a0bac:	7c00      	ldrb	r0, [r0, #16]
 80a0bae:	f7ff be4d 	b.w	80a084c <HAL_I2C_Available_Data>

080a0bb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0bb2:	2100      	movs	r1, #0
 80a0bb4:	7c00      	ldrb	r0, [r0, #16]
 80a0bb6:	f7ff be51 	b.w	80a085c <HAL_I2C_Read_Data>

080a0bba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0bba:	2100      	movs	r1, #0
 80a0bbc:	7c00      	ldrb	r0, [r0, #16]
 80a0bbe:	f7ff be55 	b.w	80a086c <HAL_I2C_Peek_Data>

080a0bc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0bc2:	2100      	movs	r1, #0
 80a0bc4:	7c00      	ldrb	r0, [r0, #16]
 80a0bc6:	f7ff be59 	b.w	80a087c <HAL_I2C_Flush_Data>

080a0bca <_ZN7TwoWireD0Ev>:
 80a0bca:	b510      	push	{r4, lr}
 80a0bcc:	4604      	mov	r4, r0
 80a0bce:	2114      	movs	r1, #20
 80a0bd0:	f000 fd81 	bl	80a16d6 <_ZdlPvj>
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	bd10      	pop	{r4, pc}

080a0bd8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0bd8:	b510      	push	{r4, lr}
 80a0bda:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0bdc:	2300      	movs	r3, #0
 80a0bde:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0be4:	60a3      	str	r3, [r4, #8]
 80a0be6:	4b04      	ldr	r3, [pc, #16]	; (80a0bf8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0be8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0bea:	4608      	mov	r0, r1
 80a0bec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0bee:	4611      	mov	r1, r2
 80a0bf0:	f7ff fe54 	bl	80a089c <HAL_I2C_Init>
}
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	bd10      	pop	{r4, pc}
 80a0bf8:	080a1a64 	.word	0x080a1a64

080a0bfc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0bfc:	2100      	movs	r1, #0
 80a0bfe:	7c00      	ldrb	r0, [r0, #16]
 80a0c00:	f7ff be44 	b.w	80a088c <HAL_I2C_Is_Enabled>

080a0c04 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c04:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a0c06:	b510      	push	{r4, lr}
 80a0c08:	b90a      	cbnz	r2, 80a0c0e <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a0c0a:	f000 fd80 	bl	80a170e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c0e:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a0c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c14:	4718      	bx	r3

080a0c16 <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c16:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c18:	2300      	movs	r3, #0
 80a0c1a:	6083      	str	r3, [r0, #8]
 80a0c1c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0c1e:	4604      	mov	r4, r0
 80a0c20:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0c22:	b12b      	cbz	r3, 80a0c30 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c24:	2202      	movs	r2, #2
 80a0c26:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c28:	68eb      	ldr	r3, [r5, #12]
 80a0c2a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c2c:	68ab      	ldr	r3, [r5, #8]
 80a0c2e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0c30:	4620      	mov	r0, r4
 80a0c32:	bd38      	pop	{r3, r4, r5, pc}

080a0c34 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE>:

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a0c34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80a0c36:	4b12      	ldr	r3, [pc, #72]	; (80a0c80 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x4c>)

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a0c38:	4604      	mov	r4, r0
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a0c3a:	2010      	movs	r0, #16

/*
 * System Interrupts
 */
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
 80a0c3c:	460e      	mov	r6, r1
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
 80a0c3e:	9300      	str	r3, [sp, #0]
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a0c40:	f7ff fa2b 	bl	80a009a <_Znwj>
 80a0c44:	4605      	mov	r5, r0
 80a0c46:	b110      	cbz	r0, 80a0c4e <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x1a>
 80a0c48:	4631      	mov	r1, r6
 80a0c4a:	f7ff ffe4 	bl	80a0c16 <_ZNSt8functionIFvvEEC1ERKS1_>
    HAL_InterruptCallback prev = { 0 };
 80a0c4e:	2300      	movs	r3, #0
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a0c50:	4620      	mov	r0, r4
 80a0c52:	aa02      	add	r2, sp, #8
 80a0c54:	4669      	mov	r1, sp
bool attachSystemInterrupt(hal_irq_t irq, wiring_interrupt_handler_t handler)
{
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
 80a0c56:	9501      	str	r5, [sp, #4]
    HAL_InterruptCallback prev = { 0 };
 80a0c58:	9302      	str	r3, [sp, #8]
 80a0c5a:	9303      	str	r3, [sp, #12]
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a0c5c:	f7ff fde6 	bl	80a082c <HAL_Set_System_Interrupt_Handler>
    delete (wiring_interrupt_handler_t*)prev.data;
 80a0c60:	9c03      	ldr	r4, [sp, #12]
    HAL_InterruptCallback callback;
    callback.handler = call_wiring_interrupt_handler;
    wiring_interrupt_handler_t& h = handler;
    callback.data = new wiring_interrupt_handler_t(h);
    HAL_InterruptCallback prev = { 0 };
    const bool ok = HAL_Set_System_Interrupt_Handler(irq, &callback, &prev, NULL);
 80a0c62:	1c05      	adds	r5, r0, #0
 80a0c64:	bf18      	it	ne
 80a0c66:	2501      	movne	r5, #1
    delete (wiring_interrupt_handler_t*)prev.data;
 80a0c68:	b134      	cbz	r4, 80a0c78 <_Z21attachSystemInterrupt9hal_irq_tSt8functionIFvvEE+0x44>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c6a:	4620      	mov	r0, r4
 80a0c6c:	f7ff ff7f 	bl	80a0b6e <_ZNSt14_Function_baseD1Ev>
 80a0c70:	2110      	movs	r1, #16
 80a0c72:	4620      	mov	r0, r4
 80a0c74:	f000 fd2f 	bl	80a16d6 <_ZdlPvj>
    return ok;
}
 80a0c78:	4628      	mov	r0, r5
 80a0c7a:	b004      	add	sp, #16
 80a0c7c:	bd70      	pop	{r4, r5, r6, pc}
 80a0c7e:	bf00      	nop
 80a0c80:	080a0c05 	.word	0x080a0c05

080a0c84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c84:	4770      	bx	lr

080a0c86 <_ZN9IPAddressD0Ev>:
 80a0c86:	b510      	push	{r4, lr}
 80a0c88:	4604      	mov	r4, r0
 80a0c8a:	2118      	movs	r1, #24
 80a0c8c:	f000 fd23 	bl	80a16d6 <_ZdlPvj>
 80a0c90:	4620      	mov	r0, r4
 80a0c92:	bd10      	pop	{r4, pc}

080a0c94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c96:	460f      	mov	r7, r1
 80a0c98:	f100 0608 	add.w	r6, r0, #8
 80a0c9c:	1d05      	adds	r5, r0, #4
 80a0c9e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0ca0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0ca4:	220a      	movs	r2, #10
 80a0ca6:	4638      	mov	r0, r7
 80a0ca8:	f000 f8eb 	bl	80a0e82 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0cac:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0cae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0cb0:	d007      	beq.n	80a0cc2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0cb2:	2c00      	cmp	r4, #0
 80a0cb4:	d0f4      	beq.n	80a0ca0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0cb6:	212e      	movs	r1, #46	; 0x2e
 80a0cb8:	4638      	mov	r0, r7
 80a0cba:	f000 f8df 	bl	80a0e7c <_ZN5Print5printEc>
 80a0cbe:	4404      	add	r4, r0
 80a0cc0:	e7ee      	b.n	80a0ca0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0cc8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0cc8:	b510      	push	{r4, lr}
 80a0cca:	4604      	mov	r4, r0
 80a0ccc:	4b04      	ldr	r3, [pc, #16]	; (80a0ce0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0cce:	2211      	movs	r2, #17
 80a0cd0:	f840 3b04 	str.w	r3, [r0], #4
 80a0cd4:	2100      	movs	r1, #0
 80a0cd6:	f000 fe7e 	bl	80a19d6 <memset>
{
    clear();
}
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	bd10      	pop	{r4, pc}
 80a0cde:	bf00      	nop
 80a0ce0:	080a1a8c 	.word	0x080a1a8c

080a0ce4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ce4:	4603      	mov	r3, r0
 80a0ce6:	4a07      	ldr	r2, [pc, #28]	; (80a0d04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0ce8:	b510      	push	{r4, lr}
 80a0cea:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0cee:	f101 0210 	add.w	r2, r1, #16
 80a0cf2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0cf6:	4291      	cmp	r1, r2
 80a0cf8:	f843 4b04 	str.w	r4, [r3], #4
 80a0cfc:	d1f9      	bne.n	80a0cf2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0cfe:	780a      	ldrb	r2, [r1, #0]
 80a0d00:	701a      	strb	r2, [r3, #0]
}
 80a0d02:	bd10      	pop	{r4, pc}
 80a0d04:	080a1a8c 	.word	0x080a1a8c

080a0d08 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0d08:	4a02      	ldr	r2, [pc, #8]	; (80a0d14 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0d0a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0d0c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0d0e:	2204      	movs	r2, #4
 80a0d10:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0d12:	4770      	bx	lr
 80a0d14:	080a1a8c 	.word	0x080a1a8c

080a0d18 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0d18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0d1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0d1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0d22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0d26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0d2a:	2304      	movs	r3, #4
 80a0d2c:	6041      	str	r1, [r0, #4]
 80a0d2e:	7503      	strb	r3, [r0, #20]
 80a0d30:	bd10      	pop	{r4, pc}
	...

080a0d34 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0d36:	4d04      	ldr	r5, [pc, #16]	; (80a0d48 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0d38:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0d3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0d3e:	9500      	str	r5, [sp, #0]
 80a0d40:	f7ff ffea 	bl	80a0d18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0d44:	b003      	add	sp, #12
 80a0d46:	bd30      	pop	{r4, r5, pc}
 80a0d48:	080a1a8c 	.word	0x080a1a8c

080a0d4c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a0d4c:	6800      	ldr	r0, [r0, #0]
 80a0d4e:	f7ff bd3d 	b.w	80a07cc <os_mutex_recursive_lock>
	...

080a0d54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0d54:	4a01      	ldr	r2, [pc, #4]	; (80a0d5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0d56:	4b02      	ldr	r3, [pc, #8]	; (80a0d60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0d58:	601a      	str	r2, [r3, #0]
 80a0d5a:	4770      	bx	lr
 80a0d5c:	080a1b0e 	.word	0x080a1b0e
 80a0d60:	200084a8 	.word	0x200084a8

080a0d64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d64:	2300      	movs	r3, #0
 80a0d66:	461a      	mov	r2, r3
 80a0d68:	6840      	ldr	r0, [r0, #4]
 80a0d6a:	f7ff be95 	b.w	80a0a98 <network_connect>

080a0d6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d6e:	2200      	movs	r2, #0
 80a0d70:	2102      	movs	r1, #2
 80a0d72:	6840      	ldr	r0, [r0, #4]
 80a0d74:	f7ff bea0 	b.w	80a0ab8 <network_disconnect>

080a0d78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d78:	2200      	movs	r2, #0
 80a0d7a:	4611      	mov	r1, r2
 80a0d7c:	6840      	ldr	r0, [r0, #4]
 80a0d7e:	f7ff be93 	b.w	80a0aa8 <network_connecting>

080a0d82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d82:	2200      	movs	r2, #0
 80a0d84:	4611      	mov	r1, r2
 80a0d86:	6840      	ldr	r0, [r0, #4]
 80a0d88:	f7ff be9e 	b.w	80a0ac8 <network_ready>

080a0d8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d8c:	2300      	movs	r3, #0
 80a0d8e:	461a      	mov	r2, r3
 80a0d90:	4619      	mov	r1, r3
 80a0d92:	6840      	ldr	r0, [r0, #4]
 80a0d94:	f7ff bea0 	b.w	80a0ad8 <network_on>

080a0d98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d98:	2300      	movs	r3, #0
 80a0d9a:	461a      	mov	r2, r3
 80a0d9c:	4619      	mov	r1, r3
 80a0d9e:	6840      	ldr	r0, [r0, #4]
 80a0da0:	f7ff bea2 	b.w	80a0ae8 <network_off>

080a0da4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0da4:	2200      	movs	r2, #0
 80a0da6:	f081 0101 	eor.w	r1, r1, #1
 80a0daa:	6840      	ldr	r0, [r0, #4]
 80a0dac:	f7ff bea4 	b.w	80a0af8 <network_listen>

080a0db0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0db0:	2200      	movs	r2, #0
 80a0db2:	6840      	ldr	r0, [r0, #4]
 80a0db4:	f7ff beb0 	b.w	80a0b18 <network_set_listen_timeout>

080a0db8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0db8:	2200      	movs	r2, #0
 80a0dba:	4611      	mov	r1, r2
 80a0dbc:	6840      	ldr	r0, [r0, #4]
 80a0dbe:	f7ff beb3 	b.w	80a0b28 <network_get_listen_timeout>

080a0dc2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0dc2:	2200      	movs	r2, #0
 80a0dc4:	4611      	mov	r1, r2
 80a0dc6:	6840      	ldr	r0, [r0, #4]
 80a0dc8:	f7ff be9e 	b.w	80a0b08 <network_listening>

080a0dcc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0dcc:	b570      	push	{r4, r5, r6, lr}
 80a0dce:	4616      	mov	r6, r2
 80a0dd0:	b08e      	sub	sp, #56	; 0x38
 80a0dd2:	4604      	mov	r4, r0
    IPAddress addr;
 80a0dd4:	a808      	add	r0, sp, #32
 80a0dd6:	f7ff ff77 	bl	80a0cc8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0dda:	2211      	movs	r2, #17
 80a0ddc:	2100      	movs	r1, #0
 80a0dde:	a803      	add	r0, sp, #12
 80a0de0:	f000 fdf9 	bl	80a19d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0de4:	4630      	mov	r0, r6
 80a0de6:	f000 fe27 	bl	80a1a38 <strlen>
 80a0dea:	2500      	movs	r5, #0
 80a0dec:	4b0a      	ldr	r3, [pc, #40]	; (80a0e18 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0dee:	9500      	str	r5, [sp, #0]
 80a0df0:	b281      	uxth	r1, r0
 80a0df2:	685b      	ldr	r3, [r3, #4]
 80a0df4:	aa03      	add	r2, sp, #12
 80a0df6:	4630      	mov	r0, r6
 80a0df8:	f7ff fe1a 	bl	80a0a30 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0dfc:	b120      	cbz	r0, 80a0e08 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0dfe:	4629      	mov	r1, r5
 80a0e00:	4620      	mov	r0, r4
 80a0e02:	f7ff ff81 	bl	80a0d08 <_ZN9IPAddressC1Em>
 80a0e06:	e003      	b.n	80a0e10 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0e08:	a903      	add	r1, sp, #12
 80a0e0a:	4620      	mov	r0, r4
 80a0e0c:	f7ff ff6a 	bl	80a0ce4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	b00e      	add	sp, #56	; 0x38
 80a0e14:	bd70      	pop	{r4, r5, r6, pc}
 80a0e16:	bf00      	nop
 80a0e18:	20008930 	.word	0x20008930

080a0e1c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0e1c:	4b02      	ldr	r3, [pc, #8]	; (80a0e28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e1e:	4a03      	ldr	r2, [pc, #12]	; (80a0e2c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e20:	601a      	str	r2, [r3, #0]
 80a0e22:	2200      	movs	r2, #0
 80a0e24:	605a      	str	r2, [r3, #4]
 80a0e26:	4770      	bx	lr
 80a0e28:	200084ac 	.word	0x200084ac
 80a0e2c:	080a1b84 	.word	0x080a1b84

080a0e30 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e32:	4606      	mov	r6, r0
 80a0e34:	460d      	mov	r5, r1
 80a0e36:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0e38:	2400      	movs	r4, #0
  while (size--) {
 80a0e3a:	42bd      	cmp	r5, r7
 80a0e3c:	d00c      	beq.n	80a0e58 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0e3e:	6833      	ldr	r3, [r6, #0]
 80a0e40:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0e44:	689b      	ldr	r3, [r3, #8]
 80a0e46:	4630      	mov	r0, r6
 80a0e48:	4798      	blx	r3
     if (chunk>=0)
 80a0e4a:	2800      	cmp	r0, #0
 80a0e4c:	db01      	blt.n	80a0e52 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e4e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0e50:	e7f3      	b.n	80a0e3a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e52:	2c00      	cmp	r4, #0
 80a0e54:	bf08      	it	eq
 80a0e56:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e58:	4620      	mov	r0, r4
 80a0e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e5c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0e5c:	b570      	push	{r4, r5, r6, lr}
 80a0e5e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e60:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0e62:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0e64:	b149      	cbz	r1, 80a0e7a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e66:	f000 fde7 	bl	80a1a38 <strlen>
 80a0e6a:	682b      	ldr	r3, [r5, #0]
 80a0e6c:	4602      	mov	r2, r0
 80a0e6e:	4621      	mov	r1, r4
 80a0e70:	4628      	mov	r0, r5
    }
 80a0e72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0e76:	68db      	ldr	r3, [r3, #12]
 80a0e78:	4718      	bx	r3
    }
 80a0e7a:	bd70      	pop	{r4, r5, r6, pc}

080a0e7c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0e7c:	6803      	ldr	r3, [r0, #0]
 80a0e7e:	689b      	ldr	r3, [r3, #8]
 80a0e80:	4718      	bx	r3

080a0e82 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e82:	2a01      	cmp	r2, #1
 80a0e84:	bf98      	it	ls
 80a0e86:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e88:	b530      	push	{r4, r5, lr}
 80a0e8a:	460b      	mov	r3, r1
 80a0e8c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e8e:	2100      	movs	r1, #0
 80a0e90:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0e94:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0e98:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0e9c:	fb05 3312 	mls	r3, r5, r2, r3
 80a0ea0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ea2:	2b09      	cmp	r3, #9
 80a0ea4:	bf94      	ite	ls
 80a0ea6:	3330      	addls	r3, #48	; 0x30
 80a0ea8:	3337      	addhi	r3, #55	; 0x37
 80a0eaa:	b2db      	uxtb	r3, r3
 80a0eac:	4621      	mov	r1, r4
 80a0eae:	f804 3901 	strb.w	r3, [r4], #-1
 80a0eb2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0eb4:	2d00      	cmp	r5, #0
 80a0eb6:	d1ef      	bne.n	80a0e98 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0eb8:	f7ff ffd0 	bl	80a0e5c <_ZN5Print5writeEPKc>
}
 80a0ebc:	b00b      	add	sp, #44	; 0x2c
 80a0ebe:	bd30      	pop	{r4, r5, pc}

080a0ec0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0ec0:	b510      	push	{r4, lr}
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	f7ff fe53 	bl	80a0b6e <_ZNSt14_Function_baseD1Ev>
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	bd10      	pop	{r4, pc}

080a0ecc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ecc:	4803      	ldr	r0, [pc, #12]	; (80a0edc <_GLOBAL__sub_I_RGB+0x10>)
 80a0ece:	2300      	movs	r3, #0
 80a0ed0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ed2:	4a03      	ldr	r2, [pc, #12]	; (80a0ee0 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ed4:	4903      	ldr	r1, [pc, #12]	; (80a0ee4 <_GLOBAL__sub_I_RGB+0x18>)
 80a0ed6:	f000 bbf9 	b.w	80a16cc <__aeabi_atexit>
 80a0eda:	bf00      	nop
 80a0edc:	200084b4 	.word	0x200084b4
 80a0ee0:	20000068 	.word	0x20000068
 80a0ee4:	080a0ec1 	.word	0x080a0ec1

080a0ee8 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a0ee8:	6800      	ldr	r0, [r0, #0]
 80a0eea:	f7ff bc77 	b.w	80a07dc <os_mutex_recursive_unlock>

080a0eee <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0eee:	b570      	push	{r4, r5, r6, lr}
 80a0ef0:	4604      	mov	r4, r0
 80a0ef2:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0ef4:	2500      	movs	r5, #0
 80a0ef6:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0efa:	f7ff fc57 	bl	80a07ac <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0efe:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0f00:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0f02:	f7ff fcfd 	bl	80a0900 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0f06:	6065      	str	r5, [r4, #4]
}
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	bd70      	pop	{r4, r5, r6, pc}

080a0f0c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a0f0c:	b538      	push	{r3, r4, r5, lr}
 80a0f0e:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0f10:	f100 0408 	add.w	r4, r0, #8
 80a0f14:	4620      	mov	r0, r4
 80a0f16:	f7ff ff19 	bl	80a0d4c <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a0f1a:	7828      	ldrb	r0, [r5, #0]
 80a0f1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0f20:	f7ff fcc6 	bl	80a08b0 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f7ff ffdf 	bl	80a0ee8 <_ZN14RecursiveMutex6unlockEv>
 80a0f2a:	bd38      	pop	{r3, r4, r5, pc}

080a0f2c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a0f2c:	b570      	push	{r4, r5, r6, lr}
 80a0f2e:	4605      	mov	r5, r0
 80a0f30:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0f32:	f100 0408 	add.w	r4, r0, #8
 80a0f36:	4620      	mov	r0, r4
 80a0f38:	f7ff ff08 	bl	80a0d4c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a0f3c:	7828      	ldrb	r0, [r5, #0]
 80a0f3e:	4631      	mov	r1, r6
 80a0f40:	f7ff fcbe 	bl	80a08c0 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0f44:	4620      	mov	r0, r4
 80a0f46:	f7ff ffcf 	bl	80a0ee8 <_ZN14RecursiveMutex6unlockEv>
 80a0f4a:	bd70      	pop	{r4, r5, r6, pc}

080a0f4c <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a0f4c:	b570      	push	{r4, r5, r6, lr}
 80a0f4e:	4605      	mov	r5, r0
 80a0f50:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0f52:	f100 0408 	add.w	r4, r0, #8
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	f7ff fef8 	bl	80a0d4c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80a0f5c:	7828      	ldrb	r0, [r5, #0]
 80a0f5e:	4631      	mov	r1, r6
 80a0f60:	f7ff fcb6 	bl	80a08d0 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f7ff ffbf 	bl	80a0ee8 <_ZN14RecursiveMutex6unlockEv>
 80a0f6a:	bd70      	pop	{r4, r5, r6, pc}

080a0f6c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0f6c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a0f6e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0f70:	6018      	str	r0, [r3, #0]
 80a0f72:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a0f74:	6818      	ldr	r0, [r3, #0]
 80a0f76:	b2e5      	uxtb	r5, r4
 80a0f78:	4288      	cmp	r0, r1
 80a0f7a:	d906      	bls.n	80a0f8a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a0f7c:	3401      	adds	r4, #1
 80a0f7e:	2c08      	cmp	r4, #8
 80a0f80:	d002      	beq.n	80a0f88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a0f82:	0840      	lsrs	r0, r0, #1
 80a0f84:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a0f86:	e7f5      	b.n	80a0f74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a0f88:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a0f8a:	4b02      	ldr	r3, [pc, #8]	; (80a0f94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a0f8c:	5d5b      	ldrb	r3, [r3, r5]
 80a0f8e:	7013      	strb	r3, [r2, #0]
 80a0f90:	bd30      	pop	{r4, r5, pc}
 80a0f92:	bf00      	nop
 80a0f94:	080a1bb0 	.word	0x080a1bb0

080a0f98 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a0f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0f9c:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0f9e:	f100 0608 	add.w	r6, r0, #8
 80a0fa2:	b088      	sub	sp, #32
    unsigned clock = 0;
 80a0fa4:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a0fa6:	fb02 f701 	mul.w	r7, r2, r1
 80a0faa:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80a0fac:	9402      	str	r4, [sp, #8]
 80a0fae:	f7ff fecd 	bl	80a0d4c <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a0fb2:	f895 8000 	ldrb.w	r8, [r5]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a0fb6:	4621      	mov	r1, r4
 80a0fb8:	2214      	movs	r2, #20
 80a0fba:	a803      	add	r0, sp, #12
 80a0fbc:	f000 fd0b 	bl	80a19d6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0fc0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a0fc2:	4622      	mov	r2, r4
 80a0fc4:	a903      	add	r1, sp, #12
 80a0fc6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0fc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80a0fcc:	f7ff fca8 	bl	80a0920 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0fd0:	ab02      	add	r3, sp, #8
 80a0fd2:	f10d 0207 	add.w	r2, sp, #7
 80a0fd6:	4639      	mov	r1, r7
 80a0fd8:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 80a0fda:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0fde:	f7ff ffc5 	bl	80a0f6c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 80a0fe2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a0fe6:	7828      	ldrb	r0, [r5, #0]
 80a0fe8:	f7ff fc7a 	bl	80a08e0 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0fec:	4630      	mov	r0, r6
 80a0fee:	f7ff ff7b 	bl	80a0ee8 <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80a0ff2:	9802      	ldr	r0, [sp, #8]
 80a0ff4:	b008      	add	sp, #32
 80a0ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0ffc <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a0ffc:	b570      	push	{r4, r5, r6, lr}
 80a0ffe:	4604      	mov	r4, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1000:	f100 0508 	add.w	r5, r0, #8
 80a1004:	4628      	mov	r0, r5
 80a1006:	460e      	mov	r6, r1
 80a1008:	f7ff fea0 	bl	80a0d4c <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        if (_dividerReference)
 80a100c:	6861      	ldr	r1, [r4, #4]
 80a100e:	b179      	cbz	r1, 80a1030 <_ZN8SPIClass15setClockDividerEh+0x34>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
 80a1010:	4a0b      	ldr	r2, [pc, #44]	; (80a1040 <_ZN8SPIClass15setClockDividerEh+0x44>)
 80a1012:	2300      	movs	r3, #0
 80a1014:	5c98      	ldrb	r0, [r3, r2]
 80a1016:	42b0      	cmp	r0, r6
 80a1018:	d002      	beq.n	80a1020 <_ZN8SPIClass15setClockDividerEh+0x24>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
 80a101a:	3301      	adds	r3, #1
 80a101c:	2b08      	cmp	r3, #8
 80a101e:	d1f9      	bne.n	80a1014 <_ZN8SPIClass15setClockDividerEh+0x18>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
 80a1020:	3301      	adds	r3, #1
 80a1022:	b2db      	uxtb	r3, r3
 80a1024:	2201      	movs	r2, #1
 80a1026:	40d9      	lsrs	r1, r3
 80a1028:	4620      	mov	r0, r4
 80a102a:	f7ff ffb5 	bl	80a0f98 <_ZN8SPIClass13setClockSpeedEjj>
 80a102e:	e003      	b.n	80a1038 <_ZN8SPIClass15setClockDividerEh+0x3c>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1030:	4631      	mov	r1, r6
 80a1032:	7820      	ldrb	r0, [r4, #0]
 80a1034:	f7ff fc54 	bl	80a08e0 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1038:	4628      	mov	r0, r5
 80a103a:	f7ff ff55 	bl	80a0ee8 <_ZN14RecursiveMutex6unlockEv>
 80a103e:	bd70      	pop	{r4, r5, r6, pc}
 80a1040:	080a1bb0 	.word	0x080a1bb0

080a1044 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1044:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a1046:	7800      	ldrb	r0, [r0, #0]
 80a1048:	f7ff fc52 	bl	80a08f0 <HAL_SPI_Send_Receive_Data>
}
 80a104c:	b2c0      	uxtb	r0, r0
 80a104e:	bd08      	pop	{r3, pc}

080a1050 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a1050:	b530      	push	{r4, r5, lr}
 80a1052:	b087      	sub	sp, #28
 80a1054:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a1056:	4604      	mov	r4, r0
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a1058:	7800      	ldrb	r0, [r0, #0]
 80a105a:	9500      	str	r5, [sp, #0]
 80a105c:	f7ff fc68 	bl	80a0930 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
 80a1060:	b93d      	cbnz	r5, 80a1072 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
 80a1062:	a902      	add	r1, sp, #8
 80a1064:	7820      	ldrb	r0, [r4, #0]
 80a1066:	f7ff fc6b 	bl	80a0940 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
 80a106a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a106e:	07db      	lsls	r3, r3, #31
 80a1070:	d4f7      	bmi.n	80a1062 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
 80a1072:	b007      	add	sp, #28
 80a1074:	bd30      	pop	{r4, r5, pc}

080a1076 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1076:	7800      	ldrb	r0, [r0, #0]
 80a1078:	f7ff bc4a 	b.w	80a0910 <HAL_SPI_Is_Enabled>

080a107c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a107c:	b510      	push	{r4, lr}
 80a107e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1080:	6800      	ldr	r0, [r0, #0]
 80a1082:	b118      	cbz	r0, 80a108c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1084:	f7ff fd60 	bl	80a0b48 <free>
            wakeupSource_ = nullptr;
 80a1088:	2300      	movs	r3, #0
 80a108a:	6023      	str	r3, [r4, #0]
 80a108c:	bd10      	pop	{r4, pc}

080a108e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a108e:	b510      	push	{r4, lr}
 80a1090:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1092:	f7ff fff3 	bl	80a107c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1096:	4620      	mov	r0, r4
 80a1098:	bd10      	pop	{r4, pc}
	...

080a109c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a10a0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a10a2:	4c08      	ldr	r4, [pc, #32]	; (80a10c4 <_GLOBAL__sub_I_System+0x28>)
 80a10a4:	2000      	movs	r0, #0
 80a10a6:	6020      	str	r0, [r4, #0]
 80a10a8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a10aa:	71a0      	strb	r0, [r4, #6]
 80a10ac:	8120      	strh	r0, [r4, #8]
 80a10ae:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a10b0:	f7ff fcc6 	bl	80a0a40 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a10b4:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a10b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a10ba:	4a03      	ldr	r2, [pc, #12]	; (80a10c8 <_GLOBAL__sub_I_System+0x2c>)
 80a10bc:	4903      	ldr	r1, [pc, #12]	; (80a10cc <_GLOBAL__sub_I_System+0x30>)
 80a10be:	f000 bb05 	b.w	80a16cc <__aeabi_atexit>
 80a10c2:	bf00      	nop
 80a10c4:	200084c4 	.word	0x200084c4
 80a10c8:	20000068 	.word	0x20000068
 80a10cc:	080a108f 	.word	0x080a108f

080a10d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a10d0:	4b02      	ldr	r3, [pc, #8]	; (80a10dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a10d2:	681a      	ldr	r2, [r3, #0]
 80a10d4:	4b02      	ldr	r3, [pc, #8]	; (80a10e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a10d6:	601a      	str	r2, [r3, #0]
 80a10d8:	4770      	bx	lr
 80a10da:	bf00      	nop
 80a10dc:	20000000 	.word	0x20000000
 80a10e0:	200084d0 	.word	0x200084d0

080a10e4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a10e4:	4770      	bx	lr

080a10e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10e6:	7441      	strb	r1, [r0, #17]
 80a10e8:	4770      	bx	lr

080a10ea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a10ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a10ec:	7c00      	ldrb	r0, [r0, #16]
 80a10ee:	f7ff fc67 	bl	80a09c0 <HAL_USART_Available_Data_For_Write>
}
 80a10f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10f6:	bd08      	pop	{r3, pc}

080a10f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10f8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a10fa:	7c00      	ldrb	r0, [r0, #16]
 80a10fc:	f7ff fc38 	bl	80a0970 <HAL_USART_Available_Data>
}
 80a1100:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1104:	bd08      	pop	{r3, pc}

080a1106 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1106:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1108:	7c00      	ldrb	r0, [r0, #16]
 80a110a:	f7ff fc41 	bl	80a0990 <HAL_USART_Peek_Data>
}
 80a110e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1112:	bf28      	it	cs
 80a1114:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1118:	bd08      	pop	{r3, pc}

080a111a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a111a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a111c:	7c00      	ldrb	r0, [r0, #16]
 80a111e:	f7ff fc2f 	bl	80a0980 <HAL_USART_Read_Data>
}
 80a1122:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1126:	bf28      	it	cs
 80a1128:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a112c:	bd08      	pop	{r3, pc}

080a112e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a112e:	7c00      	ldrb	r0, [r0, #16]
 80a1130:	f7ff bc36 	b.w	80a09a0 <HAL_USART_Flush_Data>

080a1134 <_ZN11USARTSerialD0Ev>:
 80a1134:	b510      	push	{r4, lr}
 80a1136:	4604      	mov	r4, r0
 80a1138:	2114      	movs	r1, #20
 80a113a:	f000 facc 	bl	80a16d6 <_ZdlPvj>
 80a113e:	4620      	mov	r0, r4
 80a1140:	bd10      	pop	{r4, pc}

080a1142 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1142:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1144:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1146:	4604      	mov	r4, r0
 80a1148:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a114a:	b925      	cbnz	r5, 80a1156 <_ZN11USARTSerial5writeEh+0x14>
 80a114c:	7c00      	ldrb	r0, [r0, #16]
 80a114e:	f7ff fc37 	bl	80a09c0 <HAL_USART_Available_Data_For_Write>
 80a1152:	2800      	cmp	r0, #0
 80a1154:	dd05      	ble.n	80a1162 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1156:	4631      	mov	r1, r6
 80a1158:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a115a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a115e:	f7ff bbff 	b.w	80a0960 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1162:	4628      	mov	r0, r5
 80a1164:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1168 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1168:	b510      	push	{r4, lr}
 80a116a:	4604      	mov	r4, r0
 80a116c:	4608      	mov	r0, r1
 80a116e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1170:	2200      	movs	r2, #0
 80a1172:	6062      	str	r2, [r4, #4]
 80a1174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1178:	60a2      	str	r2, [r4, #8]
 80a117a:	4a05      	ldr	r2, [pc, #20]	; (80a1190 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a117c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a117e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1180:	2201      	movs	r2, #1
 80a1182:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1184:	461a      	mov	r2, r3
 80a1186:	f7ff fbe3 	bl	80a0950 <HAL_USART_Init>
}
 80a118a:	4620      	mov	r0, r4
 80a118c:	bd10      	pop	{r4, pc}
 80a118e:	bf00      	nop
 80a1190:	080a1bec 	.word	0x080a1bec

080a1194 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1194:	7c00      	ldrb	r0, [r0, #16]
 80a1196:	f7ff bc0b 	b.w	80a09b0 <HAL_USART_Is_Enabled>
	...

080a119c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a119c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a119e:	4d0c      	ldr	r5, [pc, #48]	; (80a11d0 <_Z22__fetch_global_Serial1v+0x34>)
 80a11a0:	6829      	ldr	r1, [r5, #0]
 80a11a2:	f011 0401 	ands.w	r4, r1, #1
 80a11a6:	d111      	bne.n	80a11cc <_Z22__fetch_global_Serial1v+0x30>
 80a11a8:	4628      	mov	r0, r5
 80a11aa:	f7fe ff7a 	bl	80a00a2 <__cxa_guard_acquire>
 80a11ae:	b168      	cbz	r0, 80a11cc <_Z22__fetch_global_Serial1v+0x30>
 80a11b0:	4a08      	ldr	r2, [pc, #32]	; (80a11d4 <_Z22__fetch_global_Serial1v+0x38>)
 80a11b2:	4621      	mov	r1, r4
 80a11b4:	4b08      	ldr	r3, [pc, #32]	; (80a11d8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a11b6:	4809      	ldr	r0, [pc, #36]	; (80a11dc <_Z22__fetch_global_Serial1v+0x40>)
 80a11b8:	f7ff ffd6 	bl	80a1168 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a11bc:	4628      	mov	r0, r5
 80a11be:	f7fe ff75 	bl	80a00ac <__cxa_guard_release>
 80a11c2:	4a07      	ldr	r2, [pc, #28]	; (80a11e0 <_Z22__fetch_global_Serial1v+0x44>)
 80a11c4:	4907      	ldr	r1, [pc, #28]	; (80a11e4 <_Z22__fetch_global_Serial1v+0x48>)
 80a11c6:	4805      	ldr	r0, [pc, #20]	; (80a11dc <_Z22__fetch_global_Serial1v+0x40>)
 80a11c8:	f000 fa80 	bl	80a16cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a11cc:	4803      	ldr	r0, [pc, #12]	; (80a11dc <_Z22__fetch_global_Serial1v+0x40>)
 80a11ce:	bd38      	pop	{r3, r4, r5, pc}
 80a11d0:	2000856c 	.word	0x2000856c
 80a11d4:	20008570 	.word	0x20008570
 80a11d8:	200084e8 	.word	0x200084e8
 80a11dc:	200084d4 	.word	0x200084d4
 80a11e0:	20000068 	.word	0x20000068
 80a11e4:	080a10e5 	.word	0x080a10e5

080a11e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a11e8:	7441      	strb	r1, [r0, #17]
 80a11ea:	4770      	bx	lr

080a11ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a11ec:	4770      	bx	lr

080a11ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a11ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a11f0:	2100      	movs	r1, #0
 80a11f2:	7c00      	ldrb	r0, [r0, #16]
 80a11f4:	f7ff fc04 	bl	80a0a00 <HAL_USB_USART_Receive_Data>
}
 80a11f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11fc:	bf28      	it	cs
 80a11fe:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1202:	bd08      	pop	{r3, pc}

080a1204 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1204:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1206:	2101      	movs	r1, #1
 80a1208:	7c00      	ldrb	r0, [r0, #16]
 80a120a:	f7ff fbf9 	bl	80a0a00 <HAL_USB_USART_Receive_Data>
}
 80a120e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1212:	bf28      	it	cs
 80a1214:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a1218:	bd08      	pop	{r3, pc}

080a121a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a121a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a121c:	7c00      	ldrb	r0, [r0, #16]
 80a121e:	f7ff fbe7 	bl	80a09f0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1226:	bd08      	pop	{r3, pc}

080a1228 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1228:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a122a:	7c00      	ldrb	r0, [r0, #16]
 80a122c:	f7ff fbd8 	bl	80a09e0 <HAL_USB_USART_Available_Data>
}
 80a1230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1234:	bd08      	pop	{r3, pc}

080a1236 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1236:	7c00      	ldrb	r0, [r0, #16]
 80a1238:	f7ff bbf2 	b.w	80a0a20 <HAL_USB_USART_Flush_Data>

080a123c <_ZN9USBSerialD0Ev>:
 80a123c:	b510      	push	{r4, lr}
 80a123e:	4604      	mov	r4, r0
 80a1240:	2114      	movs	r1, #20
 80a1242:	f000 fa48 	bl	80a16d6 <_ZdlPvj>
 80a1246:	4620      	mov	r0, r4
 80a1248:	bd10      	pop	{r4, pc}

080a124a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a124a:	b538      	push	{r3, r4, r5, lr}
 80a124c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a124e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1250:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1252:	f7ff fbcd 	bl	80a09f0 <HAL_USB_USART_Available_Data_For_Write>
 80a1256:	2800      	cmp	r0, #0
 80a1258:	dc01      	bgt.n	80a125e <_ZN9USBSerial5writeEh+0x14>
 80a125a:	7c60      	ldrb	r0, [r4, #17]
 80a125c:	b128      	cbz	r0, 80a126a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a125e:	4629      	mov	r1, r5
 80a1260:	7c20      	ldrb	r0, [r4, #16]
 80a1262:	f7ff fbd5 	bl	80a0a10 <HAL_USB_USART_Send_Data>
 80a1266:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a126a:	bd38      	pop	{r3, r4, r5, pc}

080a126c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a126c:	b510      	push	{r4, lr}
 80a126e:	4604      	mov	r4, r0
 80a1270:	2300      	movs	r3, #0
 80a1272:	6063      	str	r3, [r4, #4]
 80a1274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1278:	60a3      	str	r3, [r4, #8]
 80a127a:	4b05      	ldr	r3, [pc, #20]	; (80a1290 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a127c:	4608      	mov	r0, r1
 80a127e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1280:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1282:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1284:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1286:	4611      	mov	r1, r2
 80a1288:	f7ff fba2 	bl	80a09d0 <HAL_USB_USART_Init>
}
 80a128c:	4620      	mov	r0, r4
 80a128e:	bd10      	pop	{r4, pc}
 80a1290:	080a1c1c 	.word	0x080a1c1c

080a1294 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1294:	b510      	push	{r4, lr}
 80a1296:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1298:	2214      	movs	r2, #20
 80a129a:	2100      	movs	r1, #0
 80a129c:	f000 fb9b 	bl	80a19d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12a0:	4b05      	ldr	r3, [pc, #20]	; (80a12b8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a12a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a12a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a12a6:	4b05      	ldr	r3, [pc, #20]	; (80a12bc <_Z19acquireSerialBufferv+0x28>)
 80a12a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a12aa:	f240 1301 	movw	r3, #257	; 0x101
 80a12ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a12b0:	2381      	movs	r3, #129	; 0x81
 80a12b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a12b4:	bd10      	pop	{r4, pc}
 80a12b6:	bf00      	nop
 80a12b8:	20008679 	.word	0x20008679
 80a12bc:	200085f8 	.word	0x200085f8

080a12c0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a12c0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12c2:	4d0e      	ldr	r5, [pc, #56]	; (80a12fc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a12c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a12c6:	a801      	add	r0, sp, #4
 80a12c8:	f7ff ffe4 	bl	80a1294 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12cc:	6829      	ldr	r1, [r5, #0]
 80a12ce:	f011 0401 	ands.w	r4, r1, #1
 80a12d2:	d110      	bne.n	80a12f6 <_Z16_fetch_usbserialv+0x36>
 80a12d4:	4628      	mov	r0, r5
 80a12d6:	f7fe fee4 	bl	80a00a2 <__cxa_guard_acquire>
 80a12da:	b160      	cbz	r0, 80a12f6 <_Z16_fetch_usbserialv+0x36>
 80a12dc:	aa01      	add	r2, sp, #4
 80a12de:	4621      	mov	r1, r4
 80a12e0:	4807      	ldr	r0, [pc, #28]	; (80a1300 <_Z16_fetch_usbserialv+0x40>)
 80a12e2:	f7ff ffc3 	bl	80a126c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a12e6:	4628      	mov	r0, r5
 80a12e8:	f7fe fee0 	bl	80a00ac <__cxa_guard_release>
 80a12ec:	4a05      	ldr	r2, [pc, #20]	; (80a1304 <_Z16_fetch_usbserialv+0x44>)
 80a12ee:	4906      	ldr	r1, [pc, #24]	; (80a1308 <_Z16_fetch_usbserialv+0x48>)
 80a12f0:	4803      	ldr	r0, [pc, #12]	; (80a1300 <_Z16_fetch_usbserialv+0x40>)
 80a12f2:	f000 f9eb 	bl	80a16cc <__aeabi_atexit>
	return _usbserial;
}
 80a12f6:	4802      	ldr	r0, [pc, #8]	; (80a1300 <_Z16_fetch_usbserialv+0x40>)
 80a12f8:	b007      	add	sp, #28
 80a12fa:	bd30      	pop	{r4, r5, pc}
 80a12fc:	200085f4 	.word	0x200085f4
 80a1300:	2000877c 	.word	0x2000877c
 80a1304:	20000068 	.word	0x20000068
 80a1308:	080a11ed 	.word	0x080a11ed

080a130c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a130c:	b510      	push	{r4, lr}
 80a130e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1310:	2214      	movs	r2, #20
 80a1312:	2100      	movs	r1, #0
 80a1314:	f000 fb5f 	bl	80a19d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1318:	4b05      	ldr	r3, [pc, #20]	; (80a1330 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a131a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a131c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a131e:	4b05      	ldr	r3, [pc, #20]	; (80a1334 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1320:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1322:	f240 1301 	movw	r3, #257	; 0x101
 80a1326:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1328:	2381      	movs	r3, #129	; 0x81
 80a132a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a132c:	bd10      	pop	{r4, pc}
 80a132e:	bf00      	nop
 80a1330:	2000882c 	.word	0x2000882c
 80a1334:	20008794 	.word	0x20008794

080a1338 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1338:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a133a:	4c0e      	ldr	r4, [pc, #56]	; (80a1374 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a133c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a133e:	a801      	add	r0, sp, #4
 80a1340:	f7ff ffe4 	bl	80a130c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1344:	6823      	ldr	r3, [r4, #0]
 80a1346:	07db      	lsls	r3, r3, #31
 80a1348:	d410      	bmi.n	80a136c <_Z17_fetch_usbserial1v+0x34>
 80a134a:	4620      	mov	r0, r4
 80a134c:	f7fe fea9 	bl	80a00a2 <__cxa_guard_acquire>
 80a1350:	b160      	cbz	r0, 80a136c <_Z17_fetch_usbserial1v+0x34>
 80a1352:	aa01      	add	r2, sp, #4
 80a1354:	2101      	movs	r1, #1
 80a1356:	4808      	ldr	r0, [pc, #32]	; (80a1378 <_Z17_fetch_usbserial1v+0x40>)
 80a1358:	f7ff ff88 	bl	80a126c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a135c:	4620      	mov	r0, r4
 80a135e:	f7fe fea5 	bl	80a00ac <__cxa_guard_release>
 80a1362:	4a06      	ldr	r2, [pc, #24]	; (80a137c <_Z17_fetch_usbserial1v+0x44>)
 80a1364:	4906      	ldr	r1, [pc, #24]	; (80a1380 <_Z17_fetch_usbserial1v+0x48>)
 80a1366:	4804      	ldr	r0, [pc, #16]	; (80a1378 <_Z17_fetch_usbserial1v+0x40>)
 80a1368:	f000 f9b0 	bl	80a16cc <__aeabi_atexit>
  return _usbserial1;
}
 80a136c:	4802      	ldr	r0, [pc, #8]	; (80a1378 <_Z17_fetch_usbserial1v+0x40>)
 80a136e:	b006      	add	sp, #24
 80a1370:	bd10      	pop	{r4, pc}
 80a1372:	bf00      	nop
 80a1374:	20008790 	.word	0x20008790
 80a1378:	20008818 	.word	0x20008818
 80a137c:	20000068 	.word	0x20000068
 80a1380:	080a11ed 	.word	0x080a11ed

080a1384 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1384:	2200      	movs	r2, #0
 80a1386:	4611      	mov	r1, r2
 80a1388:	6840      	ldr	r0, [r0, #4]
 80a138a:	f7ff bb9d 	b.w	80a0ac8 <network_ready>

080a138e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a138e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1390:	4616      	mov	r6, r2
 80a1392:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1394:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1396:	460f      	mov	r7, r1
 80a1398:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a139a:	2100      	movs	r1, #0
 80a139c:	a803      	add	r0, sp, #12
 80a139e:	f000 fb1a 	bl	80a19d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a13a2:	4630      	mov	r0, r6
 80a13a4:	f000 fb48 	bl	80a1a38 <strlen>
 80a13a8:	2500      	movs	r5, #0
 80a13aa:	9500      	str	r5, [sp, #0]
 80a13ac:	b281      	uxth	r1, r0
 80a13ae:	687b      	ldr	r3, [r7, #4]
 80a13b0:	aa03      	add	r2, sp, #12
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f7ff fb3c 	bl	80a0a30 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a13b8:	b120      	cbz	r0, 80a13c4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a13ba:	4629      	mov	r1, r5
 80a13bc:	4620      	mov	r0, r4
 80a13be:	f7ff fca3 	bl	80a0d08 <_ZN9IPAddressC1Em>
 80a13c2:	e003      	b.n	80a13cc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a13c4:	a903      	add	r1, sp, #12
 80a13c6:	4620      	mov	r0, r4
 80a13c8:	f7ff fc8c 	bl	80a0ce4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a13cc:	4620      	mov	r0, r4
 80a13ce:	b009      	add	sp, #36	; 0x24
 80a13d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a13d2:	2200      	movs	r2, #0
 80a13d4:	4611      	mov	r1, r2
 80a13d6:	6840      	ldr	r0, [r0, #4]
 80a13d8:	f7ff bb96 	b.w	80a0b08 <network_listening>

080a13dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a13dc:	2200      	movs	r2, #0
 80a13de:	4611      	mov	r1, r2
 80a13e0:	6840      	ldr	r0, [r0, #4]
 80a13e2:	f7ff bba1 	b.w	80a0b28 <network_get_listen_timeout>

080a13e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a13e6:	2200      	movs	r2, #0
 80a13e8:	6840      	ldr	r0, [r0, #4]
 80a13ea:	f7ff bb95 	b.w	80a0b18 <network_set_listen_timeout>

080a13ee <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a13ee:	2200      	movs	r2, #0
 80a13f0:	f081 0101 	eor.w	r1, r1, #1
 80a13f4:	6840      	ldr	r0, [r0, #4]
 80a13f6:	f7ff bb7f 	b.w	80a0af8 <network_listen>

080a13fa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a13fa:	2300      	movs	r3, #0
 80a13fc:	461a      	mov	r2, r3
 80a13fe:	4619      	mov	r1, r3
 80a1400:	6840      	ldr	r0, [r0, #4]
 80a1402:	f7ff bb71 	b.w	80a0ae8 <network_off>

080a1406 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1406:	2300      	movs	r3, #0
 80a1408:	461a      	mov	r2, r3
 80a140a:	4619      	mov	r1, r3
 80a140c:	6840      	ldr	r0, [r0, #4]
 80a140e:	f7ff bb63 	b.w	80a0ad8 <network_on>

080a1412 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1412:	2200      	movs	r2, #0
 80a1414:	4611      	mov	r1, r2
 80a1416:	6840      	ldr	r0, [r0, #4]
 80a1418:	f7ff bb46 	b.w	80a0aa8 <network_connecting>

080a141c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a141c:	2200      	movs	r2, #0
 80a141e:	2102      	movs	r1, #2
 80a1420:	6840      	ldr	r0, [r0, #4]
 80a1422:	f7ff bb49 	b.w	80a0ab8 <network_disconnect>

080a1426 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1426:	2300      	movs	r3, #0
 80a1428:	461a      	mov	r2, r3
 80a142a:	6840      	ldr	r0, [r0, #4]
 80a142c:	f7ff bb34 	b.w	80a0a98 <network_connect>

080a1430 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a1430:	4b02      	ldr	r3, [pc, #8]	; (80a143c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1432:	2204      	movs	r2, #4
 80a1434:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1436:	4a02      	ldr	r2, [pc, #8]	; (80a1440 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1438:	601a      	str	r2, [r3, #0]
 80a143a:	4770      	bx	lr
 80a143c:	20008930 	.word	0x20008930
 80a1440:	080a1c4c 	.word	0x080a1c4c

080a1444 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1444:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1446:	4b14      	ldr	r3, [pc, #80]	; (80a1498 <serialEventRun+0x54>)
 80a1448:	b133      	cbz	r3, 80a1458 <serialEventRun+0x14>
 80a144a:	f7ff ff39 	bl	80a12c0 <_Z16_fetch_usbserialv>
 80a144e:	6803      	ldr	r3, [r0, #0]
 80a1450:	691b      	ldr	r3, [r3, #16]
 80a1452:	4798      	blx	r3
 80a1454:	2800      	cmp	r0, #0
 80a1456:	dc16      	bgt.n	80a1486 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1458:	4b10      	ldr	r3, [pc, #64]	; (80a149c <serialEventRun+0x58>)
 80a145a:	b133      	cbz	r3, 80a146a <serialEventRun+0x26>
 80a145c:	f7ff fe9e 	bl	80a119c <_Z22__fetch_global_Serial1v>
 80a1460:	6803      	ldr	r3, [r0, #0]
 80a1462:	691b      	ldr	r3, [r3, #16]
 80a1464:	4798      	blx	r3
 80a1466:	2800      	cmp	r0, #0
 80a1468:	dc10      	bgt.n	80a148c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a146a:	4b0d      	ldr	r3, [pc, #52]	; (80a14a0 <serialEventRun+0x5c>)
 80a146c:	b10b      	cbz	r3, 80a1472 <serialEventRun+0x2e>
 80a146e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1472:	4b0c      	ldr	r3, [pc, #48]	; (80a14a4 <serialEventRun+0x60>)
 80a1474:	b17b      	cbz	r3, 80a1496 <serialEventRun+0x52>
 80a1476:	f7ff ff5f 	bl	80a1338 <_Z17_fetch_usbserial1v>
 80a147a:	6803      	ldr	r3, [r0, #0]
 80a147c:	691b      	ldr	r3, [r3, #16]
 80a147e:	4798      	blx	r3
 80a1480:	2800      	cmp	r0, #0
 80a1482:	dc06      	bgt.n	80a1492 <serialEventRun+0x4e>
 80a1484:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1486:	f3af 8000 	nop.w
 80a148a:	e7e5      	b.n	80a1458 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a148c:	f3af 8000 	nop.w
 80a1490:	e7eb      	b.n	80a146a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1492:	f3af 8000 	nop.w
 80a1496:	bd08      	pop	{r3, pc}
	...

080a14a8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a14a8:	b508      	push	{r3, lr}
	serialEventRun();
 80a14aa:	f7ff ffcb 	bl	80a1444 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a14ae:	f7ff f9a5 	bl	80a07fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a14b2:	4b01      	ldr	r3, [pc, #4]	; (80a14b8 <_post_loop+0x10>)
 80a14b4:	6018      	str	r0, [r3, #0]
 80a14b6:	bd08      	pop	{r3, pc}
 80a14b8:	20008940 	.word	0x20008940

080a14bc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a14bc:	4802      	ldr	r0, [pc, #8]	; (80a14c8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a14be:	4a03      	ldr	r2, [pc, #12]	; (80a14cc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a14c0:	4903      	ldr	r1, [pc, #12]	; (80a14d0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a14c2:	1a12      	subs	r2, r2, r0
 80a14c4:	f000 ba7c 	b.w	80a19c0 <memcpy>
 80a14c8:	40024000 	.word	0x40024000
 80a14cc:	40024004 	.word	0x40024004
 80a14d0:	080a1d20 	.word	0x080a1d20

080a14d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a14d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14d6:	2300      	movs	r3, #0
 80a14d8:	9300      	str	r3, [sp, #0]
 80a14da:	461a      	mov	r2, r3
 80a14dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a14e0:	f7ff fac8 	bl	80a0a74 <system_ctrl_set_result>
}
 80a14e4:	b003      	add	sp, #12
 80a14e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a14ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a14ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a14ee:	8843      	ldrh	r3, [r0, #2]
 80a14f0:	2b0a      	cmp	r3, #10
 80a14f2:	d008      	beq.n	80a1506 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a14f4:	2b50      	cmp	r3, #80	; 0x50
 80a14f6:	d109      	bne.n	80a150c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a14f8:	4b09      	ldr	r3, [pc, #36]	; (80a1520 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a14fa:	681b      	ldr	r3, [r3, #0]
 80a14fc:	b13b      	cbz	r3, 80a150e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a14fe:	b003      	add	sp, #12
 80a1500:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1504:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1506:	f7ff ffe5 	bl	80a14d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a150a:	e006      	b.n	80a151a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a150c:	2300      	movs	r3, #0
 80a150e:	9300      	str	r3, [sp, #0]
 80a1510:	461a      	mov	r2, r3
 80a1512:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1516:	f7ff faad 	bl	80a0a74 <system_ctrl_set_result>
        break;
    }
}
 80a151a:	b003      	add	sp, #12
 80a151c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1520:	20008938 	.word	0x20008938

080a1524 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1524:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1526:	4c10      	ldr	r4, [pc, #64]	; (80a1568 <module_user_init_hook+0x44>)
 80a1528:	4d10      	ldr	r5, [pc, #64]	; (80a156c <module_user_init_hook+0x48>)
 80a152a:	6823      	ldr	r3, [r4, #0]
 80a152c:	42ab      	cmp	r3, r5
 80a152e:	4b10      	ldr	r3, [pc, #64]	; (80a1570 <module_user_init_hook+0x4c>)
 80a1530:	bf0c      	ite	eq
 80a1532:	2201      	moveq	r2, #1
 80a1534:	2200      	movne	r2, #0
 80a1536:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1538:	d002      	beq.n	80a1540 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a153a:	f7ff ffbf 	bl	80a14bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a153e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1540:	f7ff f954 	bl	80a07ec <HAL_RNG_GetRandomNumber>
 80a1544:	4604      	mov	r4, r0
    srand(seed);
 80a1546:	f000 fa4f 	bl	80a19e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a154a:	4b0a      	ldr	r3, [pc, #40]	; (80a1574 <module_user_init_hook+0x50>)
 80a154c:	b113      	cbz	r3, 80a1554 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a154e:	4620      	mov	r0, r4
 80a1550:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1554:	2100      	movs	r1, #0
 80a1556:	4807      	ldr	r0, [pc, #28]	; (80a1574 <module_user_init_hook+0x50>)
 80a1558:	f7ff fa96 	bl	80a0a88 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a155c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1560:	2100      	movs	r1, #0
 80a1562:	4805      	ldr	r0, [pc, #20]	; (80a1578 <module_user_init_hook+0x54>)
 80a1564:	f7ff ba7c 	b.w	80a0a60 <system_ctrl_set_app_request_handler>
 80a1568:	40024000 	.word	0x40024000
 80a156c:	9a271c1e 	.word	0x9a271c1e
 80a1570:	2000893c 	.word	0x2000893c
 80a1574:	00000000 	.word	0x00000000
 80a1578:	080a14ed 	.word	0x080a14ed

080a157c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a157c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a157e:	4e1a      	ldr	r6, [pc, #104]	; (80a15e8 <pinAvailable+0x6c>)
 80a1580:	4604      	mov	r4, r0
 80a1582:	6831      	ldr	r1, [r6, #0]
 80a1584:	f011 0501 	ands.w	r5, r1, #1
 80a1588:	d10f      	bne.n	80a15aa <pinAvailable+0x2e>
 80a158a:	4630      	mov	r0, r6
 80a158c:	f7fe fd89 	bl	80a00a2 <__cxa_guard_acquire>
 80a1590:	b158      	cbz	r0, 80a15aa <pinAvailable+0x2e>
 80a1592:	4629      	mov	r1, r5
 80a1594:	4815      	ldr	r0, [pc, #84]	; (80a15ec <pinAvailable+0x70>)
 80a1596:	f7ff fcaa 	bl	80a0eee <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a159a:	4630      	mov	r0, r6
 80a159c:	f7fe fd86 	bl	80a00ac <__cxa_guard_release>
 80a15a0:	4a13      	ldr	r2, [pc, #76]	; (80a15f0 <pinAvailable+0x74>)
 80a15a2:	4914      	ldr	r1, [pc, #80]	; (80a15f4 <pinAvailable+0x78>)
 80a15a4:	4811      	ldr	r0, [pc, #68]	; (80a15ec <pinAvailable+0x70>)
 80a15a6:	f000 f891 	bl	80a16cc <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a15aa:	4810      	ldr	r0, [pc, #64]	; (80a15ec <pinAvailable+0x70>)
 80a15ac:	f7ff fd63 	bl	80a1076 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a15b0:	b128      	cbz	r0, 80a15be <pinAvailable+0x42>
 80a15b2:	f1a4 030d 	sub.w	r3, r4, #13
 80a15b6:	2b02      	cmp	r3, #2
 80a15b8:	d801      	bhi.n	80a15be <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a15ba:	2000      	movs	r0, #0
 80a15bc:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a15be:	f000 f847 	bl	80a1650 <_Z19__fetch_global_Wirev>
 80a15c2:	f7ff fb1b 	bl	80a0bfc <_ZN7TwoWire9isEnabledEv>
 80a15c6:	b108      	cbz	r0, 80a15cc <pinAvailable+0x50>
 80a15c8:	2c01      	cmp	r4, #1
 80a15ca:	d9f6      	bls.n	80a15ba <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a15cc:	f7ff fde6 	bl	80a119c <_Z22__fetch_global_Serial1v>
 80a15d0:	f7ff fde0 	bl	80a1194 <_ZN11USARTSerial9isEnabledEv>
 80a15d4:	b118      	cbz	r0, 80a15de <pinAvailable+0x62>
 80a15d6:	f1a4 0312 	sub.w	r3, r4, #18
 80a15da:	2b01      	cmp	r3, #1
 80a15dc:	d9ed      	bls.n	80a15ba <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a15de:	2c17      	cmp	r4, #23
 80a15e0:	bf8c      	ite	hi
 80a15e2:	2000      	movhi	r0, #0
 80a15e4:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a15e6:	bd70      	pop	{r4, r5, r6, pc}
 80a15e8:	2000848c 	.word	0x2000848c
 80a15ec:	20008490 	.word	0x20008490
 80a15f0:	20000068 	.word	0x20000068
 80a15f4:	080a02f1 	.word	0x080a02f1

080a15f8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15f8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a15fa:	b538      	push	{r3, r4, r5, lr}
 80a15fc:	4604      	mov	r4, r0
 80a15fe:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1600:	d80a      	bhi.n	80a1618 <pinMode+0x20>
 80a1602:	29ff      	cmp	r1, #255	; 0xff
 80a1604:	d008      	beq.n	80a1618 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1606:	f7ff ffb9 	bl	80a157c <pinAvailable>
 80a160a:	b128      	cbz	r0, 80a1618 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a160c:	4629      	mov	r1, r5
 80a160e:	4620      	mov	r0, r4
}
 80a1610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1614:	f7ff b902 	b.w	80a081c <HAL_Pin_Mode>
 80a1618:	bd38      	pop	{r3, r4, r5, pc}
	...

080a161c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a161c:	b570      	push	{r4, r5, r6, lr}
 80a161e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1620:	2514      	movs	r5, #20
 80a1622:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1624:	4e09      	ldr	r6, [pc, #36]	; (80a164c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1626:	2100      	movs	r1, #0
 80a1628:	f000 f9d5 	bl	80a19d6 <memset>
 80a162c:	8025      	strh	r5, [r4, #0]
 80a162e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1630:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1632:	60a5      	str	r5, [r4, #8]
 80a1634:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1636:	4628      	mov	r0, r5
 80a1638:	f000 f867 	bl	80a170a <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a163c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a163e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1640:	4628      	mov	r0, r5
 80a1642:	f000 f862 	bl	80a170a <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1646:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1648:	4620      	mov	r0, r4
 80a164a:	bd70      	pop	{r4, r5, r6, pc}
 80a164c:	080a1c78 	.word	0x080a1c78

080a1650 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1650:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1652:	4d0e      	ldr	r5, [pc, #56]	; (80a168c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1654:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1656:	6829      	ldr	r1, [r5, #0]
 80a1658:	f011 0401 	ands.w	r4, r1, #1
 80a165c:	d113      	bne.n	80a1686 <_Z19__fetch_global_Wirev+0x36>
 80a165e:	4628      	mov	r0, r5
 80a1660:	f7fe fd1f 	bl	80a00a2 <__cxa_guard_acquire>
 80a1664:	b178      	cbz	r0, 80a1686 <_Z19__fetch_global_Wirev+0x36>
 80a1666:	a801      	add	r0, sp, #4
 80a1668:	f7ff ffd8 	bl	80a161c <_Z17acquireWireBufferv>
 80a166c:	aa01      	add	r2, sp, #4
 80a166e:	4621      	mov	r1, r4
 80a1670:	4807      	ldr	r0, [pc, #28]	; (80a1690 <_Z19__fetch_global_Wirev+0x40>)
 80a1672:	f7ff fab1 	bl	80a0bd8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1676:	4628      	mov	r0, r5
 80a1678:	f7fe fd18 	bl	80a00ac <__cxa_guard_release>
 80a167c:	4a05      	ldr	r2, [pc, #20]	; (80a1694 <_Z19__fetch_global_Wirev+0x44>)
 80a167e:	4906      	ldr	r1, [pc, #24]	; (80a1698 <_Z19__fetch_global_Wirev+0x48>)
 80a1680:	4803      	ldr	r0, [pc, #12]	; (80a1690 <_Z19__fetch_global_Wirev+0x40>)
 80a1682:	f000 f823 	bl	80a16cc <__aeabi_atexit>
	return wire;
}
 80a1686:	4802      	ldr	r0, [pc, #8]	; (80a1690 <_Z19__fetch_global_Wirev+0x40>)
 80a1688:	b007      	add	sp, #28
 80a168a:	bd30      	pop	{r4, r5, pc}
 80a168c:	20008944 	.word	0x20008944
 80a1690:	20008948 	.word	0x20008948
 80a1694:	20000068 	.word	0x20000068
 80a1698:	080a0b81 	.word	0x080a0b81

080a169c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a169c:	b513      	push	{r0, r1, r4, lr}
 80a169e:	4c08      	ldr	r4, [pc, #32]	; (80a16c0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a16a0:	2300      	movs	r3, #0
 80a16a2:	461a      	mov	r2, r3
 80a16a4:	4619      	mov	r1, r3
 80a16a6:	9300      	str	r3, [sp, #0]
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	f7ff fb43 	bl	80a0d34 <_ZN9IPAddressC1Ehhhh>
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	4a04      	ldr	r2, [pc, #16]	; (80a16c4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a16b2:	4905      	ldr	r1, [pc, #20]	; (80a16c8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a16b4:	b002      	add	sp, #8
 80a16b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a16ba:	f000 b807 	b.w	80a16cc <__aeabi_atexit>
 80a16be:	bf00      	nop
 80a16c0:	2000895c 	.word	0x2000895c
 80a16c4:	20000068 	.word	0x20000068
 80a16c8:	080a0c85 	.word	0x080a0c85

080a16cc <__aeabi_atexit>:
 80a16cc:	460b      	mov	r3, r1
 80a16ce:	4601      	mov	r1, r0
 80a16d0:	4618      	mov	r0, r3
 80a16d2:	f000 b967 	b.w	80a19a4 <__cxa_atexit>

080a16d6 <_ZdlPvj>:
 80a16d6:	f7fe bce2 	b.w	80a009e <_ZdlPv>
	...

080a16dc <_ZSt15get_new_handlerv>:
 80a16dc:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <_ZSt15get_new_handlerv+0xc>)
 80a16de:	6818      	ldr	r0, [r3, #0]
 80a16e0:	f3bf 8f5f 	dmb	sy
 80a16e4:	4770      	bx	lr
 80a16e6:	bf00      	nop
 80a16e8:	20008974 	.word	0x20008974

080a16ec <_ZnwjRKSt9nothrow_t>:
 80a16ec:	b510      	push	{r4, lr}
 80a16ee:	2800      	cmp	r0, #0
 80a16f0:	bf14      	ite	ne
 80a16f2:	4604      	movne	r4, r0
 80a16f4:	2401      	moveq	r4, #1
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	f7ff fa1e 	bl	80a0b38 <malloc>
 80a16fc:	b920      	cbnz	r0, 80a1708 <_ZnwjRKSt9nothrow_t+0x1c>
 80a16fe:	f7ff ffed 	bl	80a16dc <_ZSt15get_new_handlerv>
 80a1702:	b108      	cbz	r0, 80a1708 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1704:	4780      	blx	r0
 80a1706:	e7f6      	b.n	80a16f6 <_ZnwjRKSt9nothrow_t+0xa>
 80a1708:	bd10      	pop	{r4, pc}

080a170a <_ZnajRKSt9nothrow_t>:
 80a170a:	f7ff bfef 	b.w	80a16ec <_ZnwjRKSt9nothrow_t>

080a170e <_ZSt25__throw_bad_function_callv>:
 80a170e:	b508      	push	{r3, lr}
 80a1710:	f7ff fa22 	bl	80a0b58 <abort>

080a1714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1714:	4b24      	ldr	r3, [pc, #144]	; (80a17a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1716:	681a      	ldr	r2, [r3, #0]
 80a1718:	07d0      	lsls	r0, r2, #31
 80a171a:	bf5c      	itt	pl
 80a171c:	2201      	movpl	r2, #1
 80a171e:	601a      	strpl	r2, [r3, #0]
 80a1720:	4b22      	ldr	r3, [pc, #136]	; (80a17ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1722:	681a      	ldr	r2, [r3, #0]
 80a1724:	07d1      	lsls	r1, r2, #31
 80a1726:	bf5c      	itt	pl
 80a1728:	2201      	movpl	r2, #1
 80a172a:	601a      	strpl	r2, [r3, #0]
 80a172c:	4b20      	ldr	r3, [pc, #128]	; (80a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a172e:	681a      	ldr	r2, [r3, #0]
 80a1730:	07d2      	lsls	r2, r2, #31
 80a1732:	bf5c      	itt	pl
 80a1734:	2201      	movpl	r2, #1
 80a1736:	601a      	strpl	r2, [r3, #0]
 80a1738:	4b1e      	ldr	r3, [pc, #120]	; (80a17b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a173a:	681a      	ldr	r2, [r3, #0]
 80a173c:	07d0      	lsls	r0, r2, #31
 80a173e:	bf5c      	itt	pl
 80a1740:	2201      	movpl	r2, #1
 80a1742:	601a      	strpl	r2, [r3, #0]
 80a1744:	4b1c      	ldr	r3, [pc, #112]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1746:	681a      	ldr	r2, [r3, #0]
 80a1748:	07d1      	lsls	r1, r2, #31
 80a174a:	bf5c      	itt	pl
 80a174c:	2201      	movpl	r2, #1
 80a174e:	601a      	strpl	r2, [r3, #0]
 80a1750:	4b1a      	ldr	r3, [pc, #104]	; (80a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1752:	681a      	ldr	r2, [r3, #0]
 80a1754:	07d2      	lsls	r2, r2, #31
 80a1756:	bf5c      	itt	pl
 80a1758:	2201      	movpl	r2, #1
 80a175a:	601a      	strpl	r2, [r3, #0]
 80a175c:	4b18      	ldr	r3, [pc, #96]	; (80a17c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a175e:	681a      	ldr	r2, [r3, #0]
 80a1760:	07d0      	lsls	r0, r2, #31
 80a1762:	bf5c      	itt	pl
 80a1764:	2201      	movpl	r2, #1
 80a1766:	601a      	strpl	r2, [r3, #0]
 80a1768:	4b16      	ldr	r3, [pc, #88]	; (80a17c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d1      	lsls	r1, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b14      	ldr	r3, [pc, #80]	; (80a17c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d2      	lsls	r2, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b12      	ldr	r3, [pc, #72]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d0      	lsls	r0, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b10      	ldr	r3, [pc, #64]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d1      	lsls	r1, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4b0e      	ldr	r3, [pc, #56]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a179a:	681a      	ldr	r2, [r3, #0]
 80a179c:	07d2      	lsls	r2, r2, #31
 80a179e:	bf5c      	itt	pl
 80a17a0:	2201      	movpl	r2, #1
 80a17a2:	601a      	strpl	r2, [r3, #0]
 80a17a4:	4770      	bx	lr
 80a17a6:	bf00      	nop
 80a17a8:	200089a4 	.word	0x200089a4
 80a17ac:	200089a0 	.word	0x200089a0
 80a17b0:	2000899c 	.word	0x2000899c
 80a17b4:	20008998 	.word	0x20008998
 80a17b8:	20008994 	.word	0x20008994
 80a17bc:	20008990 	.word	0x20008990
 80a17c0:	2000898c 	.word	0x2000898c
 80a17c4:	20008988 	.word	0x20008988
 80a17c8:	20008984 	.word	0x20008984
 80a17cc:	20008980 	.word	0x20008980
 80a17d0:	2000897c 	.word	0x2000897c
 80a17d4:	20008978 	.word	0x20008978

080a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a17d8:	4b18      	ldr	r3, [pc, #96]	; (80a183c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a17da:	681a      	ldr	r2, [r3, #0]
 80a17dc:	07d1      	lsls	r1, r2, #31
 80a17de:	bf5c      	itt	pl
 80a17e0:	2201      	movpl	r2, #1
 80a17e2:	601a      	strpl	r2, [r3, #0]
 80a17e4:	4b16      	ldr	r3, [pc, #88]	; (80a1840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a17e6:	681a      	ldr	r2, [r3, #0]
 80a17e8:	07d2      	lsls	r2, r2, #31
 80a17ea:	bf5c      	itt	pl
 80a17ec:	2201      	movpl	r2, #1
 80a17ee:	601a      	strpl	r2, [r3, #0]
 80a17f0:	4b14      	ldr	r3, [pc, #80]	; (80a1844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a17f2:	681a      	ldr	r2, [r3, #0]
 80a17f4:	07d0      	lsls	r0, r2, #31
 80a17f6:	bf5c      	itt	pl
 80a17f8:	2201      	movpl	r2, #1
 80a17fa:	601a      	strpl	r2, [r3, #0]
 80a17fc:	4b12      	ldr	r3, [pc, #72]	; (80a1848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a17fe:	681a      	ldr	r2, [r3, #0]
 80a1800:	07d1      	lsls	r1, r2, #31
 80a1802:	bf5c      	itt	pl
 80a1804:	2201      	movpl	r2, #1
 80a1806:	601a      	strpl	r2, [r3, #0]
 80a1808:	4b10      	ldr	r3, [pc, #64]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a180a:	681a      	ldr	r2, [r3, #0]
 80a180c:	07d2      	lsls	r2, r2, #31
 80a180e:	bf5c      	itt	pl
 80a1810:	2201      	movpl	r2, #1
 80a1812:	601a      	strpl	r2, [r3, #0]
 80a1814:	4b0e      	ldr	r3, [pc, #56]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1816:	681a      	ldr	r2, [r3, #0]
 80a1818:	07d0      	lsls	r0, r2, #31
 80a181a:	bf5c      	itt	pl
 80a181c:	2201      	movpl	r2, #1
 80a181e:	601a      	strpl	r2, [r3, #0]
 80a1820:	4b0c      	ldr	r3, [pc, #48]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1822:	681a      	ldr	r2, [r3, #0]
 80a1824:	07d1      	lsls	r1, r2, #31
 80a1826:	bf5c      	itt	pl
 80a1828:	2201      	movpl	r2, #1
 80a182a:	601a      	strpl	r2, [r3, #0]
 80a182c:	4b0a      	ldr	r3, [pc, #40]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a182e:	681a      	ldr	r2, [r3, #0]
 80a1830:	07d2      	lsls	r2, r2, #31
 80a1832:	bf5c      	itt	pl
 80a1834:	2201      	movpl	r2, #1
 80a1836:	601a      	strpl	r2, [r3, #0]
 80a1838:	4770      	bx	lr
 80a183a:	bf00      	nop
 80a183c:	200089c4 	.word	0x200089c4
 80a1840:	200089c0 	.word	0x200089c0
 80a1844:	200089bc 	.word	0x200089bc
 80a1848:	200089b8 	.word	0x200089b8
 80a184c:	200089b4 	.word	0x200089b4
 80a1850:	200089b0 	.word	0x200089b0
 80a1854:	200089ac 	.word	0x200089ac
 80a1858:	200089a8 	.word	0x200089a8

080a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a185c:	4b18      	ldr	r3, [pc, #96]	; (80a18c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a185e:	681a      	ldr	r2, [r3, #0]
 80a1860:	07d1      	lsls	r1, r2, #31
 80a1862:	bf5c      	itt	pl
 80a1864:	2201      	movpl	r2, #1
 80a1866:	601a      	strpl	r2, [r3, #0]
 80a1868:	4b16      	ldr	r3, [pc, #88]	; (80a18c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a186a:	681a      	ldr	r2, [r3, #0]
 80a186c:	07d2      	lsls	r2, r2, #31
 80a186e:	bf5c      	itt	pl
 80a1870:	2201      	movpl	r2, #1
 80a1872:	601a      	strpl	r2, [r3, #0]
 80a1874:	4b14      	ldr	r3, [pc, #80]	; (80a18c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1876:	681a      	ldr	r2, [r3, #0]
 80a1878:	07d0      	lsls	r0, r2, #31
 80a187a:	bf5c      	itt	pl
 80a187c:	2201      	movpl	r2, #1
 80a187e:	601a      	strpl	r2, [r3, #0]
 80a1880:	4b12      	ldr	r3, [pc, #72]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1882:	681a      	ldr	r2, [r3, #0]
 80a1884:	07d1      	lsls	r1, r2, #31
 80a1886:	bf5c      	itt	pl
 80a1888:	2201      	movpl	r2, #1
 80a188a:	601a      	strpl	r2, [r3, #0]
 80a188c:	4b10      	ldr	r3, [pc, #64]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a188e:	681a      	ldr	r2, [r3, #0]
 80a1890:	07d2      	lsls	r2, r2, #31
 80a1892:	bf5c      	itt	pl
 80a1894:	2201      	movpl	r2, #1
 80a1896:	601a      	strpl	r2, [r3, #0]
 80a1898:	4b0e      	ldr	r3, [pc, #56]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a189a:	681a      	ldr	r2, [r3, #0]
 80a189c:	07d0      	lsls	r0, r2, #31
 80a189e:	bf5c      	itt	pl
 80a18a0:	2201      	movpl	r2, #1
 80a18a2:	601a      	strpl	r2, [r3, #0]
 80a18a4:	4b0c      	ldr	r3, [pc, #48]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a18a6:	681a      	ldr	r2, [r3, #0]
 80a18a8:	07d1      	lsls	r1, r2, #31
 80a18aa:	bf5c      	itt	pl
 80a18ac:	2201      	movpl	r2, #1
 80a18ae:	601a      	strpl	r2, [r3, #0]
 80a18b0:	4b0a      	ldr	r3, [pc, #40]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	07d2      	lsls	r2, r2, #31
 80a18b6:	bf5c      	itt	pl
 80a18b8:	2201      	movpl	r2, #1
 80a18ba:	601a      	strpl	r2, [r3, #0]
 80a18bc:	4770      	bx	lr
 80a18be:	bf00      	nop
 80a18c0:	200089e4 	.word	0x200089e4
 80a18c4:	200089e0 	.word	0x200089e0
 80a18c8:	200089dc 	.word	0x200089dc
 80a18cc:	200089d8 	.word	0x200089d8
 80a18d0:	200089d4 	.word	0x200089d4
 80a18d4:	200089d0 	.word	0x200089d0
 80a18d8:	200089cc 	.word	0x200089cc
 80a18dc:	200089c8 	.word	0x200089c8

080a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a18e0:	4b24      	ldr	r3, [pc, #144]	; (80a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a18e2:	681a      	ldr	r2, [r3, #0]
 80a18e4:	07d0      	lsls	r0, r2, #31
 80a18e6:	bf5c      	itt	pl
 80a18e8:	2201      	movpl	r2, #1
 80a18ea:	601a      	strpl	r2, [r3, #0]
 80a18ec:	4b22      	ldr	r3, [pc, #136]	; (80a1978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a18ee:	681a      	ldr	r2, [r3, #0]
 80a18f0:	07d1      	lsls	r1, r2, #31
 80a18f2:	bf5c      	itt	pl
 80a18f4:	2201      	movpl	r2, #1
 80a18f6:	601a      	strpl	r2, [r3, #0]
 80a18f8:	4b20      	ldr	r3, [pc, #128]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a18fa:	681a      	ldr	r2, [r3, #0]
 80a18fc:	07d2      	lsls	r2, r2, #31
 80a18fe:	bf5c      	itt	pl
 80a1900:	2201      	movpl	r2, #1
 80a1902:	601a      	strpl	r2, [r3, #0]
 80a1904:	4b1e      	ldr	r3, [pc, #120]	; (80a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d0      	lsls	r0, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4b1c      	ldr	r3, [pc, #112]	; (80a1984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1912:	681a      	ldr	r2, [r3, #0]
 80a1914:	07d1      	lsls	r1, r2, #31
 80a1916:	bf5c      	itt	pl
 80a1918:	2201      	movpl	r2, #1
 80a191a:	601a      	strpl	r2, [r3, #0]
 80a191c:	4b1a      	ldr	r3, [pc, #104]	; (80a1988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a191e:	681a      	ldr	r2, [r3, #0]
 80a1920:	07d2      	lsls	r2, r2, #31
 80a1922:	bf5c      	itt	pl
 80a1924:	2201      	movpl	r2, #1
 80a1926:	601a      	strpl	r2, [r3, #0]
 80a1928:	4b18      	ldr	r3, [pc, #96]	; (80a198c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a192a:	681a      	ldr	r2, [r3, #0]
 80a192c:	07d0      	lsls	r0, r2, #31
 80a192e:	bf5c      	itt	pl
 80a1930:	2201      	movpl	r2, #1
 80a1932:	601a      	strpl	r2, [r3, #0]
 80a1934:	4b16      	ldr	r3, [pc, #88]	; (80a1990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d1      	lsls	r1, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4b14      	ldr	r3, [pc, #80]	; (80a1994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1942:	681a      	ldr	r2, [r3, #0]
 80a1944:	07d2      	lsls	r2, r2, #31
 80a1946:	bf5c      	itt	pl
 80a1948:	2201      	movpl	r2, #1
 80a194a:	601a      	strpl	r2, [r3, #0]
 80a194c:	4b12      	ldr	r3, [pc, #72]	; (80a1998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a194e:	681a      	ldr	r2, [r3, #0]
 80a1950:	07d0      	lsls	r0, r2, #31
 80a1952:	bf5c      	itt	pl
 80a1954:	2201      	movpl	r2, #1
 80a1956:	601a      	strpl	r2, [r3, #0]
 80a1958:	4b10      	ldr	r3, [pc, #64]	; (80a199c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a195a:	681a      	ldr	r2, [r3, #0]
 80a195c:	07d1      	lsls	r1, r2, #31
 80a195e:	bf5c      	itt	pl
 80a1960:	2201      	movpl	r2, #1
 80a1962:	601a      	strpl	r2, [r3, #0]
 80a1964:	4b0e      	ldr	r3, [pc, #56]	; (80a19a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1966:	681a      	ldr	r2, [r3, #0]
 80a1968:	07d2      	lsls	r2, r2, #31
 80a196a:	bf5c      	itt	pl
 80a196c:	2201      	movpl	r2, #1
 80a196e:	601a      	strpl	r2, [r3, #0]
 80a1970:	4770      	bx	lr
 80a1972:	bf00      	nop
 80a1974:	20008a14 	.word	0x20008a14
 80a1978:	20008a10 	.word	0x20008a10
 80a197c:	20008a0c 	.word	0x20008a0c
 80a1980:	20008a08 	.word	0x20008a08
 80a1984:	20008a04 	.word	0x20008a04
 80a1988:	20008a00 	.word	0x20008a00
 80a198c:	200089fc 	.word	0x200089fc
 80a1990:	200089f8 	.word	0x200089f8
 80a1994:	200089f4 	.word	0x200089f4
 80a1998:	200089f0 	.word	0x200089f0
 80a199c:	200089ec 	.word	0x200089ec
 80a19a0:	200089e8 	.word	0x200089e8

080a19a4 <__cxa_atexit>:
 80a19a4:	b510      	push	{r4, lr}
 80a19a6:	4c05      	ldr	r4, [pc, #20]	; (80a19bc <__cxa_atexit+0x18>)
 80a19a8:	4613      	mov	r3, r2
 80a19aa:	b12c      	cbz	r4, 80a19b8 <__cxa_atexit+0x14>
 80a19ac:	460a      	mov	r2, r1
 80a19ae:	4601      	mov	r1, r0
 80a19b0:	2002      	movs	r0, #2
 80a19b2:	f3af 8000 	nop.w
 80a19b6:	bd10      	pop	{r4, pc}
 80a19b8:	4620      	mov	r0, r4
 80a19ba:	bd10      	pop	{r4, pc}
 80a19bc:	00000000 	.word	0x00000000

080a19c0 <memcpy>:
 80a19c0:	b510      	push	{r4, lr}
 80a19c2:	1e43      	subs	r3, r0, #1
 80a19c4:	440a      	add	r2, r1
 80a19c6:	4291      	cmp	r1, r2
 80a19c8:	d004      	beq.n	80a19d4 <memcpy+0x14>
 80a19ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a19ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a19d2:	e7f8      	b.n	80a19c6 <memcpy+0x6>
 80a19d4:	bd10      	pop	{r4, pc}

080a19d6 <memset>:
 80a19d6:	4603      	mov	r3, r0
 80a19d8:	4402      	add	r2, r0
 80a19da:	4293      	cmp	r3, r2
 80a19dc:	d002      	beq.n	80a19e4 <memset+0xe>
 80a19de:	f803 1b01 	strb.w	r1, [r3], #1
 80a19e2:	e7fa      	b.n	80a19da <memset+0x4>
 80a19e4:	4770      	bx	lr
	...

080a19e8 <srand>:
 80a19e8:	b538      	push	{r3, r4, r5, lr}
 80a19ea:	4b12      	ldr	r3, [pc, #72]	; (80a1a34 <srand+0x4c>)
 80a19ec:	4605      	mov	r5, r0
 80a19ee:	681c      	ldr	r4, [r3, #0]
 80a19f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a19f2:	b9d3      	cbnz	r3, 80a1a2a <srand+0x42>
 80a19f4:	2018      	movs	r0, #24
 80a19f6:	f7ff f89f 	bl	80a0b38 <malloc>
 80a19fa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a19fe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1a00:	8003      	strh	r3, [r0, #0]
 80a1a02:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1a06:	8043      	strh	r3, [r0, #2]
 80a1a08:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1a0c:	8083      	strh	r3, [r0, #4]
 80a1a0e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1a12:	80c3      	strh	r3, [r0, #6]
 80a1a14:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1a18:	8103      	strh	r3, [r0, #8]
 80a1a1a:	2305      	movs	r3, #5
 80a1a1c:	8143      	strh	r3, [r0, #10]
 80a1a1e:	230b      	movs	r3, #11
 80a1a20:	8183      	strh	r3, [r0, #12]
 80a1a22:	2201      	movs	r2, #1
 80a1a24:	2300      	movs	r3, #0
 80a1a26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1a2c:	2200      	movs	r2, #0
 80a1a2e:	611d      	str	r5, [r3, #16]
 80a1a30:	615a      	str	r2, [r3, #20]
 80a1a32:	bd38      	pop	{r3, r4, r5, pc}
 80a1a34:	20000064 	.word	0x20000064

080a1a38 <strlen>:
 80a1a38:	4603      	mov	r3, r0
 80a1a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1a3e:	2a00      	cmp	r2, #0
 80a1a40:	d1fb      	bne.n	80a1a3a <strlen+0x2>
 80a1a42:	1a18      	subs	r0, r3, r0
 80a1a44:	3801      	subs	r0, #1
 80a1a46:	4770      	bx	lr

080a1a48 <dynalib_user>:
 80a1a48:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1a58:	0000 0000                                   ....

080a1a5c <_ZTV7TwoWire>:
	...
 80a1a64:	0b81 080a 0bcb 080a 0ba3 080a 0b83 080a     ................
 80a1a74:	0bab 080a 0bb3 080a 0bbb 080a 0bc3 080a     ................

080a1a84 <_ZTV9IPAddress>:
	...
 80a1a8c:	0c95 080a 0c85 080a 0c87 080a 6162 6475     ............baud
 80a1a9c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a1aac:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a1abc:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a1acc:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a1adc:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a1aec:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a1afc:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a1b0c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a1b1c:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a1b2c:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a1b3c:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a1b4c:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a1b5c:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1b6c:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1b7c <_ZTVN5spark12NetworkClassE>:
	...
 80a1b84:	0d65 080a 0d6f 080a 0d79 080a 0d83 080a     e...o...y.......
 80a1b94:	0d8d 080a 0d99 080a 0da5 080a 0db1 080a     ................
 80a1ba4:	0db9 080a 0dc3 080a 0dcd 080a               ............

080a1bb0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a1bb0:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
 80a1bc0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a1bd0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a1be0:	0000 0000                                   ....

080a1be4 <_ZTV11USARTSerial>:
	...
 80a1bec:	10e5 080a 1135 080a 1143 080a 0e31 080a     ....5...C...1...
 80a1bfc:	10f9 080a 111b 080a 1107 080a 112f 080a     ............/...
 80a1c0c:	10e7 080a 10eb 080a                         ........

080a1c14 <_ZTV9USBSerial>:
	...
 80a1c1c:	11ed 080a 123d 080a 124b 080a 0e31 080a     ....=...K...1...
 80a1c2c:	1229 080a 11ef 080a 1205 080a 1237 080a     )...........7...
 80a1c3c:	121b 080a 11e9 080a                         ........

080a1c44 <_ZTVN5spark9WiFiClassE>:
	...
 80a1c4c:	1427 080a 141d 080a 1413 080a 1385 080a     '...............
 80a1c5c:	1407 080a 13fb 080a 13ef 080a 13e7 080a     ................
 80a1c6c:	13dd 080a 13d3 080a 138f 080a               ............

080a1c78 <_ZSt7nothrow>:
 80a1c78:	0000 0000                                   ....

080a1c7c <__sf_fake_stdin>:
	...

080a1c9c <__sf_fake_stdout>:
	...

080a1cbc <__sf_fake_stderr>:
	...
 80a1cdc:	0043                                        C.

080a1cde <link_const_variable_data_end>:
	...

080a1ce0 <link_constructors_location>:
 80a1ce0:	080a0255 	.word	0x080a0255
 80a1ce4:	080a0721 	.word	0x080a0721
 80a1ce8:	080a078d 	.word	0x080a078d
 80a1cec:	080a0d55 	.word	0x080a0d55
 80a1cf0:	080a0e1d 	.word	0x080a0e1d
 80a1cf4:	080a0ecd 	.word	0x080a0ecd
 80a1cf8:	080a109d 	.word	0x080a109d
 80a1cfc:	080a10d1 	.word	0x080a10d1
 80a1d00:	080a1431 	.word	0x080a1431
 80a1d04:	080a169d 	.word	0x080a169d
 80a1d08:	080a1715 	.word	0x080a1715
 80a1d0c:	080a17d9 	.word	0x080a17d9
 80a1d10:	080a185d 	.word	0x080a185d
 80a1d14:	080a18e1 	.word	0x080a18e1

080a1d18 <link_constructors_end>:
	...
