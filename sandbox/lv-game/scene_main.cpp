
#include "lv-game/scene_main.h"
#include "lv-game/shared.h"
#include "lv-engine/engine.h"
#include <stdlib.h>

#ifndef PRIPS_DECODER
#define PRIPS_DECODER

#define PRIPS_FILE_VERSION 		0b01
#define PRIPS_FILE_SIGNATURE 	0b01100

#include <math.h>

namespace Prips{

	typedef unsigned char byte;
	typedef unsigned short ui16;
	typedef unsigned int ui32;

	typedef struct PlanesWalker {

		ui32 byteStart;
		ui32 sizeInBytes;

        const byte *const image;
		
		ui32 cursor;
		ui32 currentByte;
		ui32 buffer;

		ui32 rleBuffer;
		ui32 currentColorBit;

		PlanesWalker(ui32 _byteStart, const byte *const _image) : byteStart(_byteStart), image(_image){
            rewind();
		}

        void rewind(){

            buffer = 8;
			cursor = byteStart;
			currentByte = *(image + cursor);

			sizeInBytes = advance();
			goToNextByte();
			sizeInBytes += cursor - byteStart;

			pickFirstBit();
			rleBuffer = advance();

        }

		inline ui32 nextPixelColor(){

			if(--rleBuffer == 0){
				rleBuffer = advance();
				currentColorBit = !currentColorBit;
			}

			return currentColorBit;
		}

		inline void pickFirstBit(){
			currentColorBit = (currentByte & 0x80) >> 7;
			currentByte <<= 1;
			buffer--;
		}

		inline void goToNextByte(){
			currentByte = *(image + ++cursor);
			buffer = 8;
		}

		ui32 advance(){

			ui32 bit = 0;
			ui32 number = 0;
			ui32 count = 0;
			ui32 counting = 1;

			do {
				
				bit = (currentByte & 0x80);

				currentByte <<= 1;
				buffer--;

				if(!buffer) goToNextByte();

				if (counting) {
					if(!bit) count++;
					else counting = false;	
				} 

				if (!counting) {
					number |= bit == 0 ? 0 : 1;
					if(count-- == 0) break;
					else number <<= 1;
				}
				
			} while (true);

			return number;
		}

	} PlanesWalker;

	typedef struct File {

		byte planes;
		byte available;
		byte hasAlpha;

		ui16 width;
		ui16 height;

        const byte *const image;
        PlanesWalker *p;

		File(const byte *const _image) : image(_image){

			byte headerHigh = *(image + 0);
			byte headerLow  = *(image + 1);

			available = (headerHigh & 0b11111000) >> 3 == PRIPS_FILE_SIGNATURE;
			available = available && (headerLow & 0b11000000) >> 6 == PRIPS_FILE_VERSION;

			if (!available) return;

			planes 	= (byte) (headerHigh & 0b00000111);	
			width 	= pow(2, 2 + ((byte) (headerLow & 0b00111000) >> 3));
			height 	= pow(2, 2 + ((byte) (headerLow & 0b00000111)));

            p = NULL;
		}

		inline ui32 planesStart(){
			return 2 + pow(2, planes); // 2 bytes header + (n * colors)
		}

		unsigned short color(ui16 index) {
			return *(image + (2 + index)); // 2 bytes header + (n * colors)
		}

		byte* decompress(){
			
			if (!available) return NULL;
			byte *buffer = (byte*) malloc(height * width * sizeof(byte));
			ui32 planePadding = 0;
			hasAlpha = false;

			for(ui16 pln = 0; pln < planes; pln++){

				p = new PlanesWalker(planesStart() + planePadding, (const byte *const) image);
				planePadding += p->sizeInBytes;

				for (ui16 y = 0; y < height; y++) {
					for (ui16 x = 0; x < width; x++) {
						byte b = pln ? *(buffer + (x + y * width)) : 0;
						b = (b << 1) | p->nextPixelColor();
						*(buffer + (x + y * width)) = b;
					}
				}

				delete p;
				p = NULL;
			}

			for (ui16 y = 0; y < height; y++) {
				for (ui16 x = 0; x < width; x++) {
					const byte c = color(*(buffer + (x + y * width)));
					*(buffer + (x + y * width)) = c;
					if (c == 0) hasAlpha = true;
				}
			}

			return buffer;
		}

	} File; 

	typedef struct Drawable {
		
		byte width;
		byte height;
		byte hasAlpha;
		lv::octet *decompressed;

		Drawable(const byte *const data) {
			
			File *parser = new File(data);
			
			width = parser->width;
			height = parser->height;
			decompressed = parser->decompress();
			hasAlpha = parser->hasAlpha;

			delete parser;
			parser = NULL;
		}

		void draw(const byte x, const byte y) {
			lvDisplay.blit(lv::Region( x, y, width, height), decompressed);
		}

		void draw(const lv::Region src, const lv::Point dest) {
			lvDisplay.blit(
				src, dest, decompressed, lv::Size(width, height)
			);
		}

		~Drawable(){
			free(decompressed);
			decompressed = NULL;
		}

	} Drawable;
}

#endif

unsigned int x = 65;
unsigned int y = 65;

namespace PNG {
	const unsigned char raw_gurl[] = {0x64,0x64,0x0,0x1,0x2,0x6,0x7,0x15,0x5,0x1b,0x10,0x13,0xf,0x0,0x0,0x0,0x0,0x0,0x7,0xc0,0x0,0x34,0x53,0xc,0x20,0xa3,0xb,0x20,0xb4,0x90,0xd4,0x2d,0x24,0x31,0x7,0xe3,0x24,0x8d,0x80,0x3a,0xc6,0x1e,0x54,0x28,0x40,0x85,0x42,0x84,0xb,0xd0,0xae,0xa2,0x96,0x36,0xb8,0xd8,0x46,0x26,0x3e,0x0,0xec,0x98,0x69,0x50,0xb1,0x2,0x55,0x9,0x10,0x25,0x63,0x3a,0x8c,0xd0,0xba,0xe2,0x61,0x58,0xd8,0xb8,0x3,0xa,0x3,0x70,0x0,0x51,0xe0,0xf7,0x58,0xee,0x19,0xe3,0x75,0x8e,0xe1,0x9e,0x38,0x83,0xd0,0x6d,0xf,0x43,0xd0,0x75,0xc,0x30,0xc2,0x6,0xc8,0x28,0x40,0xb2,0x6,0xc8,0x24,0x50,0x92,0x89,0x10,0x28,0xa0,0xa,0x32,0xf,0x75,0x8e,0xe1,0x9e,0x37,0x58,0xee,0x19,0xe3,0x88,0x3d,0x6,0xd0,0xf4,0x3d,0x7,0x50,0xc3,0xc,0x20,0x6c,0x82,0x8e,0x30,0xa1,0x92,0x8b,0x30,0xb3,0xc,0x62,0x8c,0x0,0xa3,0x20,0xf7,0x58,0xee,0x19,0xe3,0x75,0x8e,0xe1,0x9e,0x38,0x83,0xd0,0x6d,0xf,0x43,0xd0,0x75,0xc,0x30,0xc2,0x86,0x4a,0x2c,0xe2,0x8c,0x19,0x30,0xa3,0xb,0x30,0x96,0x34,0xc0,0xf,0x14,0x1,0xc4,0x0,0x86,0x43,0xd0,0x7d,0xa,0x9a,0x26,0x11,0x41,0x28,0xb8,0x52,0x22,0x48,0x98,0xea,0xd2,0x9e,0x56,0x69,0x12,0x9d,0x96,0x68,0x42,0x3e,0x78,0xf8,0x6e,0x2e,0x13,0x8b,0x44,0x43,0x2a,0x19,0xa8,0xb6,0x9e,0x5a,0x4a,0x78,0x4e,0x92,0x94,0x48,0xa2,0x9e,0xa4,0xa8,0x82,0x9f,0x11,0x9c,0xc7,0x22,0x74,0x20,0xc2,0x4c,0x2d,0x28,0x81,0x42,0x69,0x0,0x9d,0x87,0xe0,0x10,0xcd,0xd,0xd0,0x75,0x62,0x66,0x89,0x9a,0x21,0x62,0xe6,0x88,0xa8,0xd8,0x52,0x10,0x9e,0xb4,0xa3,0x59,0x92,0x4e,0x76,0x15,0x9e,0x3a,0x18,0x85,0xee,0x29,0x1e,0x2e,0xe7,0x44,0x42,0xd2,0x9d,0x4,0x29,0xa,0x69,0x8b,0xa9,0xd1,0x63,0x2a,0x27,0x32,0x96,0xca,0x26,0x4a,0x9c,0xae,0x44,0x8d,0x94,0x46,0x66,0x9d,0x1b,0x10,0x73,0xb,0x30,0xc6,0x28,0xc0,0x5a,0x82,0x58,0xd8,0x46,0x26,0x3e,0x1,0xf,0xd0,0xdd,0x7,0x56,0x26,0x68,0x99,0xa2,0x16,0x2e,0x68,0x8a,0x8d,0x85,0x21,0x9,0xeb,0x4a,0x39,0x19,0x24,0xe7,0x41,0x69,0xe3,0xa1,0x88,0x5e,0xe2,0x91,0xe2,0xee,0x74,0x44,0x2d,0x29,0xd0,0x42,0x90,0xa6,0x98,0xba,0x9d,0x16,0x32,0xa2,0x73,0x29,0x6c,0x82,0xa4,0xa8,0x82,0x39,0x4,0x39,0x5a,0x29,0x9a,0x74,0x62,0xa6,0x73,0xb,0x30,0x96,0x34,0xc0,0x5a,0x82,0x58,0x98,0x56,0x36,0x2e,0x0,0xc2,0x80,0x0,0xbc,0x0,0x1,0x14,0xc2,0xcc,0x24,0xc2,0x8c,0x25,0x22,0x9,0x48,0x87,0x10,0x20,0x89,0x1f,0x36,0x7c,0x41,0x48,0x88,0x61,0x19,0x85,0x1c,0x46,0x55,0x25,0x1b,0x10,0x5d,0xc9,0x97,0x2f,0x93,0x22,0x59,0x7c,0xb9,0x36,0x8a,0x5c,0xd9,0x54,0xf9,0xb3,0x64,0x2a,0x29,0x4b,0x59,0x54,0x49,0xb5,0x29,0x16,0x4d,0x14,0xc9,0x14,0x61,0x92,0x31,0x12,0xaa,0x9d,0x69,0x1c,0x59,0xd2,0xd1,0x6c,0x89,0x15,0xb6,0x75,0x25,0x8,0x6d,0x97,0xeb,0x99,0x2a,0x42,0x93,0x89,0x4a,0x91,0x2a,0x4a,0x95,0xe9,0x19,0x4d,0x47,0x4b,0x65,0x52,0x50,0x9d,0x67,0x52,0x50,0x8d,0x62,0x72,0x62,0xea,0x26,0x92,0x8a,0xa8,0xa6,0x98,0xbd,0x9,0xeb,0x8a,0x58,0xa6,0x98,0xb2,0x9,0x69,0x8a,0x20,0x8,0xb3,0xb,0x30,0x93,0xa,0x30,0x9e,0x98,0x9e,0x99,0xc4,0x8,0x6b,0x9f,0x36,0x7c,0xd9,0x52,0xc8,0x6c,0xd9,0xb1,0x7,0xc4,0x14,0xf4,0x61,0x19,0x77,0x26,0x53,0xf9,0x29,0x27,0x97,0xce,0x42,0xa7,0x97,0x36,0x5c,0x51,0xb3,0x64,0x2a,0x29,0x77,0x59,0x68,0xf9,0xb5,0x79,0x16,0x4d,0x14,0x9a,0x45,0xa1,0x26,0x4b,0x21,0x12,0xaa,0x45,0x2a,0x42,0xb,0x21,0xd2,0x29,0x3d,0xd9,0xc9,0x21,0x5c,0x94,0x72,0x48,0x27,0xd8,0x94,0x44,0x4b,0x4e,0x74,0x44,0x77,0xad,0x94,0x46,0x52,0x23,0x1b,0x10,0x7a,0x58,0x8d,0x16,0x65,0xa8,0x89,0x56,0x27,0x58,0x8f,0x56,0x6a,0xe2,0x5d,0x78,0xa5,0x42,0x5a,0xe7,0xd8,0xbe,0x98,0xd4,0x2e,0x48,0x94,0x3a,0x48,0x8,0xa3,0xb,0x30,0x93,0xa,0x30,0x9e,0x98,0x9e,0x99,0xc4,0x8,0x6b,0x9f,0x36,0x7c,0xd9,0x52,0xc8,0x6c,0xd9,0xb1,0x7,0xc4,0x14,0xf4,0x61,0x19,0x77,0x26,0x51,0x39,0x29,0x27,0x97,0x12,0x42,0xa7,0x97,0x36,0x5c,0x51,0xb3,0x64,0x2a,0x29,0x77,0x59,0x68,0xf9,0xb5,0x79,0x16,0x4d,0x14,0x9a,0x45,0xa1,0x26,0x4b,0x21,0x12,0xaa,0x45,0x2a,0x42,0xb,0x21,0xd2,0x29,0x35,0x74,0x72,0x2e,0x57,0x25,0x1f,0xa2,0x1d,0x7a,0x8b,0xa6,0x4b,0x4e,0x76,0xa2,0x5e,0xb6,0x53,0x24,0x53,0x76,0x64,0x8c,0x65,0xa8,0x99,0x56,0x7a,0x59,0xf4,0x59,0xd7,0x8a,0xf5,0x62,0x35,0x9d,0xd7,0x9f,0x63,0x1a,0xe2,0x95,0x8,0xe9,0x89,0x43,0xe4,0x8d,0x42,0xa4,0x80,0x2c,0x50};
	const unsigned char raw_tiles[] = {0x65,0x6d,0xc,0x1b,0x0,0xa,0x14,0xe,0xb,0x1,0x4,0x1e,0x3,0x13,0x10,0x6,0x2,0xd,0x1c,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1a,0x0,0x2,0x40,0x98,0x1e,0x90,0x1f,0xe0,0x20,0xe0,0x1,0xa7,0x60,0x0,0xec,0x0,0x0,0x2e,0x3b,0x93,0x81,0xbf,0x5a,0x55,0x60,0x6c,0x13,0x1e,0x6,0x62,0xb3,0x19,0x56,0x6,0x66,0x76,0x6b,0x60,0x65,0x69,0x18,0x5c,0x80,0x61,0x62,0xc5,0x32,0x81,0x85,0x30,0xac,0x80,0x60,0x48,0x2e,0x98,0x18,0x64,0xb,0xe0,0x62,0xc,0x11,0x81,0xa0,0x10,0x1,0x80,0x10,0x1,0x80,0x10,0x1,0x80,0x10,0x1,0x80,0x10,0x4,0xee,0x4e,0x4,0x10,0x40,0x3b,0x5a,0x55,0x60,0x41,0x4,0x2,0xc4,0xc7,0x83,0xc0,0x40,0x28,0x33,0x83,0xb0,0x92,0x18,0x2c,0x34,0xe,0xc5,0xb4,0x71,0x22,0x83,0xa0,0xe4,0x48,0xf1,0x2,0x1,0x0,0x38,0x30,0x48,0x40,0x90,0xf8,0x38,0x28,0x50,0xe2,0x1,0x0,0x38,0x28,0x54,0xc2,0x43,0xc0,0xe4,0xa1,0x62,0x89,0xf,0x83,0x82,0x85,0x4c,0x24,0x3c,0xe,0x4a,0x15,0x30,0xa0,0xe0,0x3a,0x20,0x58,0xc2,0x3,0xe0,0xe4,0x81,0x72,0x8b,0xd,0x3,0xb2,0x5,0xca,0x28,0x38,0xe,0x88,0x17,0x28,0x90,0xe8,0x3a,0x20,0x60,0x82,0x1,0x0,0x38,0x28,0x5c,0x82,0x83,0x80,0xe8,0xa1,0x62,0x89,0xf,0x3,0x92,0x85,0x8a,0x24,0x3c,0xe,0x48,0x17,0x28,0xa0,0xe0,0x3a,0x20,0x5c,0xa2,0x3,0xe0,0xe4,0x81,0x72,0x89,0xe,0x83,0xa2,0x1f,0xff,0x94,0xa2,0x3,0xe0,0xe4,0x84,0xf1,0x3e,0xc8,0x24,0x3c,0xe,0x48,0xc5,0xde,0x42,0x8,0xf,0x83,0x92,0xb7,0xe8,0x97,0xc8,0x24,0x3e,0xe,0x9,0xd8,0xc5,0xa2,0x8,0x4,0x0,0xe0,0xbe,0x39,0x4c,0x24,0x3e,0xe,0xa,0x13,0xb2,0x9,0xf,0x3,0x92,0x6,0x8,0x24,0x3c,0xe,0x48,0x9,0x70,0xde,0x6,0x20,0xd8,0x19,0xc3,0x0,0x69,0x3c,0x70,0x1a,0xeb,0xbd,0x78,0x1e,0x20,0x8,0xc1,0x50,0x1d,0x5b,0x28,0x1d,0x49,0x30,0x23,0x1a,0x4,0x52,0x4e,0x8,0x86,0x81,0x14,0x78,0x7c,0x68,0x11,0x30,0x80,0x74,0x68,0x10,0x9d,0xc4,0x2,0x11,0xa0,0x45,0x24,0x48,0x20,0x18,0x4,0x43,0x45,0x7,0xc6,0x1,0x21,0x51,0x58,0x7c,0x60,0xba,0x83,0xad,0x8,0x87,0x86,0x1e,0x4a,0x83,0xb8,0x28,0x18,0x22,0xa0,0xfe,0xa,0x6,0x8,0x60,0x69,0x18,0x2e,0xa0,0x65,0x18,0x7,0x41,0x80,0x74,0x18,0x7,0x41,0x80,0x74,0x18,0x1b,0x58,0x15,0x46,0x86,0xd0,0x15,0x86,0x86,0xe0,0x57,0x1a,0x18,0x40,0x59,0x1a,0x17,0xd8,0x15,0xc6,0x87,0x20,0x56,0x1a,0x1a,0x40,0x57,0x1c,0x19,0x54,0x5,0x41,0xe1,0x74,0x5,0x81,0xe1,0x88,0x16,0x7,0x6,0x60,0x58,0x1c,0x19,0x81,0x60,0x78,0x62,0x5,0x81,0xc0,0x72,0x1a,0x7,0x31,0x80,0x74,0x18,0x7,0x41,0x60,0x75,0x18,0x7,0x41,0x80,0x7b,0x20,0x1f,0xe0,0xc,0xbe,0x7,0xf8,0x1f,0xe0,0x7f,0x40,0x7f,0xb4,0x7,0xa5,0x40,0x7c,0x28,0x1e,0xca,0x7,0xb2,0x81,0xe8,0xc0,0x7a,0x30,0x1e,0x44,0x1,0xe0,0x48,0x1d,0x85,0x81,0xcc,0x60,0x1d,0x11,0x90,0x1f,0xd0,0x1f,0xe0,0x14,0xe0,0x0,0x5c,0xc0,0x0,0xb3,0x20,0x1e,0x45,0x1,0xd8,0x50,0x28,0x92,0x4,0x81,0x40,0x92,0xd3,0xab,0x81,0x8,0x40,0x23,0xca,0xf6,0xae,0x4,0x3,0x82,0x27,0xad,0x2a,0xb2,0x38,0x18,0x90,0x98,0xf4,0x6,0x96,0x63,0x2a,0xf8,0x10,0x8,0x1c,0x6c,0xec,0xd6,0xd8,0x3d,0x14,0x18,0x6c,0x2c,0x48,0x3d,0x14,0x18,0xb0,0xc1,0x60,0xf0,0x50,0x61,0x20,0xc9,0x10,0x3c,0x12,0x1b,0xd,0x81,0x8,0xe1,0xac,0x39,0x40,0x5e,0xf,0x34,0x6,0x66,0x89,0x95,0xa2,0x60,0x68,0xd9,0x8,0xf6,0x42,0x1,0x4,0x96,0x17,0xa9,0x73,0x29,0x72,0x84,0xa4,0x82,0x81,0x78,0x51,0x24,0x52,0x52,0x45,0x20,0xeb,0x4e,0xae,0x1f,0x79,0x33,0x61,0x38,0xf8,0x5f,0x2b,0xda,0xb8,0x6d,0x8c,0x30,0x39,0x7a,0xd2,0xab,0x23,0x85,0xa1,0x1d,0x3,0x64,0x26,0x3d,0x5,0x61,0x62,0x1,0x37,0xe1,0x24,0x19,0x87,0x8,0x12,0x61,0xa6,0x3f,0x41,0xb6,0x11,0x1a,0x10,0x61,0xd8,0xf6,0x1e,0x8e,0x8,0x8f,0x82,0x8,0x30,0x8c,0x9,0x8e,0x41,0xf4,0x2d,0x2,0x24,0x28,0x28,0xf,0x20,0x96,0x20,0x2e,0x36,0x1e,0x43,0x60,0x8e,0x24,0x2e,0x31,0x7,0xd0,0x31,0x89,0xb,0xd,0x81,0x46,0x24,0x2e,0x2c,0x81,0xc6,0xe,0xc2,0xe3,0x21,0xf8,0xc4,0x9,0x10,0x80,0xb8,0xe4,0x1a,0x8e,0x82,0x79,0x83,0x23,0x61,0xc8,0xc9,0x60,0xa4,0x32,0x32,0x1d,0x8c,0xd5,0x2,0x18,0x80,0xc0,0xb9,0xd1,0xe5,0x42,0x22,0xd9,0x10,0x27,0xc,0xc,0x44,0xa,0x12,0x35,0x11,0x87,0x36,0x60,0xc0,0xc8,0x7a,0x2d,0x10,0x81,0xc2,0x1c,0x2e,0x36,0x1e,0x8b,0x68,0x94,0x16,0x44,0x47,0xb,0x8e,0x87,0x23,0x1a,0x38,0x5d,0x12,0x60,0xc0,0x2c,0x8a,0x23,0x12,0x15,0xb6,0x50,0xc0,0x2b,0x8b,0x64,0x52,0x61,0x49,0x48,0xc4,0x7f,0xf3,0xb,0x87,0xe2,0x59,0xca,0x32,0x25,0x32,0xb2,0xf8,0x9f,0x62,0xd0,0x7a,0x25,0x92,0xd8,0xaa,0x46,0x23,0x66,0x62,0xef,0x20,0xb8,0x7e,0x20,0xd4,0xea,0x25,0x29,0x48,0x56,0x66,0xfd,0x12,0xf8,0x36,0x65,0xb5,0xa4,0xbd,0x15,0xe4,0x65,0xe4,0xd3,0xd2,0xd0,0xb8,0x20,0x88,0x3a,0xcc,0x92,0x4a,0x64,0xe9,0x99,0x63,0xab,0x8c,0x87,0xe2,0x8a,0x47,0x7f,0x62,0x11,0xd1,0x9e,0x3b,0x63,0x21,0xe8,0xb2,0xe9,0x22,0x2c,0x89,0xc8,0xca,0x64,0x19,0x88,0x87,0x90,0xac,0xa8,0xe2,0x29,0xc8,0x42,0x24,0xa,0x21,0xb8,0xe2,0xc4,0x9,0xa3,0x91,0x2,0xc8,0x71,0xe,0x1d,0x94,0x91,0x16,0xb,0x98,0x61,0xf,0x9,0xc2,0x40,0xc1,0x1e,0x3b,0x8f,0x4,0xe0,0xbb,0x55,0xde,0xbc,0x98,0x48,0x44,0x38,0xc,0xb2,0x2d,0xf8,0x6d,0x68,0x34,0xd,0x2d,0x3a,0x82,0x60,0xb8,0x1a,0x85,0xc8,0x90,0x1b,0x5,0xa8,0x1c,0x8c,0xa0,0x76,0x3b,0xe0,0x71,0x35,0x3d,0x82,0x19,0x58,0x10,0xc4,0x51,0x8a,0x8,0x8,0xe0,0x40,0xa3,0xd1,0x6d,0x87,0x33,0x28,0x3e,0xc4,0xa4,0x66,0xb4,0x1c,0x25,0x3,0xe5,0x1a,0xe8,0x40,0x23,0x8f,0x82,0xca,0x1e,0x9b,0x2a,0x83,0x2,0x2,0xda,0x16,0xca,0x8b,0x82,0xf8,0xf8,0x20,0xc6,0xa3,0xdd,0x2,0xdd,0x28,0x2e,0x48,0x52,0x37,0x83,0x9,0x2a,0xb,0xdf,0xc9,0x3f,0x83,0x1a,0x43,0x60,0x9d,0xcb,0x69,0x50,0x32,0x60,0xe1,0xaf,0xa5,0x83,0x8a,0x8c,0x82,0xb3,0x50,0x12,0x4a,0x7,0xd8,0x6,0x86,0x4,0x28,0x6a,0xe1,0xe,0x21,0x1,0x82,0x12,0x81,0x9e,0xe2,0xf8,0x89,0xa4,0x81,0x2,0xa,0x51,0xe0,0x4c,0x86,0xaa,0x26,0x59,0xb8,0x19,0x78,0xd8,0x99,0x90,0x1a,0x10,0x98,0xc8,0x10,0x61,0xc8,0xc9,0x91,0x93,0x81,0x6,0x7d,0xa,0xe3,0x61,0x35,0x81,0x6,0x2e,0x18,0x85,0x90,0x10,0xa2,0xa3,0x78,0x98,0x46,0xe0,0x45,0x98,0xa2,0xd5,0x6,0x93,0xe0,0x41,0x88,0x43,0x4a,0x21,0x5,0xb8,0x3f,0x82,0x68,0x62,0x6,0x53,0xc,0x4d,0x1,0x2,0x9,0x92,0x26,0x69,0x92,0x83,0xc8,0x27,0x68,0xa2,0xdc,0x80,0xeb,0x82,0x52,0x56,0x98,0x84,0xd8,0x31,0x6e,0x98,0x26,0x26,0xa9,0x52,0x94,0xa0,0xe2,0xa,0x8d,0x46,0x2e,0x90,0x3e,0x82,0x71,0x6,0x45,0xa6,0x6,0x73,0x2c,0x88,0x92,0x1,0xa4,0x2c,0x6,0x81,0xc8,0xe0,0x69,0xa,0x81,0xb3,0x8,0x81,0xbc,0x22,0x7,0x1,0xa0,0x75,0x16,0x7,0x51,0x18,0x1d,0xc8,0x7,0xc6,0xa0,0x7b,0x4a,0x7,0xb4,0x7,0xe4,0x7,0xd6,0xa0,0x7a,0xe0,0x7c,0x5b,0x81,0xca,0xda,0xa2,0x81,0xc0,0xd4,0xa8,0x80,0x6c,0xf3,0xcb,0x81,0xb8,0x64,0x98,0x1b,0x85,0xf6,0x7,0xf,0xc4,0x1,0xcf,0x3d,0x0,0xcd,0x0,0x7b,0x80,0x1,0x4,0x78,0x46,0x2a,0x48,0x13,0xc7,0x8d,0x91,0x13,0xb8,0x34,0x9d,0xe,0x44,0x1e,0x2a,0xb9,0xa3,0x78,0x2c,0x64,0x43,0x91,0x47,0x89,0xaa,0xf9,0x2a,0xe4,0xb8,0x29,0x59,0x91,0x4a,0x44,0xc7,0x8e,0xb5,0xee,0x4a,0x83,0x9,0x38,0xde,0x51,0xe6,0xad,0x76,0x57,0x88,0x82,0xe8,0xd3,0x88,0x1e,0x26,0xdc,0xa8,0xa8,0x87,0x81,0x18,0x79,0xa7,0x3a,0x34,0x8f,0x81,0x24,0x79,0xd7,0x15,0x1c,0xe1,0xb4,0x44,0x9,0x47,0x92,0xbc,0x37,0xd0,0x5d,0x52,0x54,0x59,0xd1,0xa3,0x47,0x89,0xc8,0x8c,0x2d,0x7,0xd6,0xb4,0x66,0x44,0x74,0x30,0x79,0x7c,0x68,0xa2,0x2e,0xa1,0x99,0x27,0x59,0x91,0x11,0xa,0x41,0xe2,0x32,0x5,0x49,0x87,0x90,0xb9,0x38,0x88,0xc1,0xe6,0xf4,0x17,0x2d,0x2,0x98,0xfa,0x3b,0x1e,0xea,0x8a,0x17,0x45,0x81,0x10,0x79,0xd0,0x60,0x40,0x62,0x2a,0x48,0xe0,0x60,0xb,0x64,0x44,0xee,0x11,0x6,0x0,0xaa,0xb9,0xa3,0x78,0x90,0x60,0xa,0x6a,0xbe,0x4a,0xb9,0x2e,0x70,0x88,0x90,0xb0,0x86,0x35,0x84,0xed,0x7b,0x92,0xa3,0x2,0x3,0x82,0x46,0x43,0x90,0xea,0xd7,0x23,0x27,0x9a,0x28,0x76,0xa3,0x31,0xea,0xed,0x1a,0xed,0xd,0xb0,0xb1,0xe5,0x1a,0xf2,0x62,0x87,0x1a,0x44,0xa6,0x91,0x29,0xa4,0xc,0xf8,0x81,0xac,0x56,0x28,0x5e,0x22,0x4e,0x22,0x2d,0x46,0xc6,0xb9,0xc5,0xbc,0x76,0x51,0x6a,0x22,0x62,0x16,0x22,0xbc,0x45,0xcd,0x3f,0x45,0x14,0x40,0x90,0x81,0xa,0x61,0xe9,0xd,0x2e,0xa6,0x46,0xc8,0x24,0xe5,0x68,0x24,0x51,0xa,0x40,0x90,0xcc,0xe1,0x55,0x6a,0x43,0x95,0x21,0xf4,0x73,0xaa,0xa,0x6d,0x8,0x61,0xb6,0x73,0x9c,0x22,0x64,0x8e,0x50,0xa9,0x11,0xb6,0x62,0x4,0xb4,0x53,0x3b,0x68,0x24,0x72,0xb0,0xc3,0x4e,0xaa,0x61,0x53,0xb,0xb3,0xe4,0xc,0x14,0xc4,0xb,0xea,0x72,0x20,0xe1,0xca,0xa5,0xb,0x8,0x29,0x42,0xd9,0xaa,0xac,0x2a,0x4e,0x72,0x8,0x72,0xa3,0xb4,0x20,0xba,0xb,0xe7,0xa2,0x31,0xa4,0x44,0x22,0x90,0x82,0x12,0x7c,0xfa,0x49,0x10,0xba,0xb,0xb9,0x7d,0x19,0x1a,0x54,0x65,0x45,0x31,0x64,0x4c,0xda,0x36,0xce,0x83,0x4,0x8a,0x82,0x1b,0x29,0x51,0x2c,0xf5,0x20,0x92,0x30,0xc9,0xef,0x44,0x90,0x83,0x56,0xa4,0x21,0xa5,0x2c,0x60,0xa2,0x30,0xc8,0x9b,0xb0,0xab,0x4a,0x66,0x3d,0xcf,0x55,0x45,0x2a,0xd,0xb,0x4c,0x2e,0xd0,0x82,0x96,0x45,0x32,0x69,0x69,0x19,0x90,0x32,0xa4,0xeb,0xd,0x13,0x90,0xa4,0x91,0x91,0xb4,0xf7,0x90,0xdc,0x30,0x31,0x20,0xba,0x62,0x8,0x29,0x90,0xd9,0x99,0x88,0xb0,0xb8,0xab,0x46,0x65,0x62,0x53,0x95,0x8c,0x4a,0xe1,0x56,0xb0,0xb8,0xb4,0xa1,0x94,0xa7,0x61,0x4,0x27,0x62,0x9a,0xc,0x88,0x91,0x10,0x88,0xc8,0xa4,0x42,0x50,0x41,0xe4,0x52,0xb,0x68,0x34,0x91,0xe5,0xb,0x3e,0xa4,0x61,0x39,0x72,0xd,0xb0,0xca,0x44,0xb7,0xb,0xa6,0xe4,0x41,0xde,0x36,0xc3,0x29,0x18,0x88,0x2e,0x9e,0x68,0x2d,0x44,0xc,0xa9,0x6a,0x40,0xb1,0xe5,0x41,0x54,0x15,0x44,0xc,0x8a,0xd1,0x13,0x1d,0x54,0xe4,0x41,0x58,0x5f,0xa3,0x75,0xf1,0x39,0x24,0x21,0x11,0xc4,0x19,0x1d,0x2,0xb2,0xa2,0xf9,0x2b,0x14,0x6d,0x98,0x86,0x62,0x10,0x86,0xa,0xcb,0x74,0x34,0x49,0x6d,0x24,0xd3,0x8a,0x49,0x29,0x5d,0x2,0x81,0x4e,0x22,0x5c,0x82,0xe,0x20,0x82,0x36,0x20,0xc0,0x9b,0x36,0x10,0x43,0xa8,0x89,0x34,0x8c,0x94,0xaa,0x53,0x28,0x22,0x28,0x6a,0x25,0x10,0x54,0x21,0xe7,0x35,0x61,0xf3,0x2,0x7a,0xd,0x8b,0x2a,0xd1,0x16,0x13,0x90,0xa0,0xac,0x32,0xd1,0xc5,0xf3,0xe,0xb4,0xca,0x9,0xaa,0x43,0x4d,0x69,0x29,0x11,0x2,0x59,0x36,0x46,0xc4,0x82,0xba,0xb4,0xf5,0xfa,0xe2,0x82,0x65,0x11,0x24,0x50,0x2c,0xad,0x2e,0xe3,0x27,0x9,0xec,0x30,0xb,0xee,0xb9,0xab,0xe2,0x42,0xb0,0xd0,0x2a,0xa9,0x67,0x85,0x1,0x80,0x32,0x96,0x44,0xa3,0x81,0x80,0x14,0x1,0x80,0x20,0x3,0x80,0xb4,0xc0,0xe0,0x32,0xc0,0xe0,0x32,0xc0,0xe4,0x2a,0xc0,0xab,0xd,0x1e,0xd3,0x13,0x2,0x6c,0x31,0x44,0xa4,0x42,0xd7,0x1d,0xf,0xc3,0x30,0xe2,0x4a,0x99,0xc,0x61,0x4c,0x11,0x5c,0x2b,0xd,0x29,0x56,0x46,0x49,0x5,0xc1,0x34,0x18,0xa9,0x56,0x46,0x5a,0x15,0xe8,0x10,0x4b,0x17,0x4,0x54,0x47,0x91,0x92,0xc4,0xe8,0x16,0x4b,0x2a,0xf,0x1d,0x29,0xe,0x41,0x90,0x51,0x15,0x50,0x43,0xb3,0x90,0x42,0x1b,0x5,0xa8,0x15,0x10,0xe4,0xb,0xc0,0xb0,0x55,0x21,0x0,0xe2,0xab,0x21,0x0,0xe1,0x6c,0xa4,0xc,0x40,0xaf,0xec,0xa4,0xd,0x20,0x2a,0x17,0x33,0xb,0x13,0x8,0xc5,0xa0,0x6a,0x63,0xb0,0xc2,0x9,0xa1,0x4,0x6,0xa7,0x33,0x9,0xab,0x19,0x2a,0xc4,0x68,0x1a,0x89,0x23,0xb,0xc6,0x22,0xac,0xce,0x81,0xad,0x10,0xcc,0x2c,0xac,0x4b,0x6a,0x95,0x25,0x6,0xc9,0x23,0xb0,0xbb,0xc4,0x11,0x24,0xaa,0xd4,0x1b,0x29,0xe,0x82,0x8b,0x71,0x4a,0x9d,0x16,0x50,0x68,0xa4,0x11,0xb,0xdc,0x4b,0xa7,0x4d,0xec,0x1a,0x51,0x4f,0x2a,0xa1,0x44,0x16,0x72,0x15,0xa5,0x6,0xa2,0xc,0x8b,0xb1,0xb1,0x6e,0xca,0xd3,0x7,0x3b,0x12,0x8c,0xc7,0x45,0xb5,0x52,0x2a,0x7,0x84,0x24,0xb3,0x21,0xf1,0x44,0x71,0x45,0x6,0xe5,0x53,0x20,0x47,0x7c,0x92,0xd7,0xc1,0xaa,0xac,0xac,0x12,0xbc,0xe9,0xd3,0x6,0x96,0xf6,0x40,0x46,0x56,0x98,0xc0,0x69,0x7c,0xa4,0x4,0x43,0xf3,0x10,0x1f,0x14,0x11,0x8c,0x28,0xa0,0x7c,0x40,0x46,0x1c,0x7,0xa4,0x4,0x61,0x85,0x6,0x47,0x21,0x41,0x18,0x60,0x1a,0x8a,0x94,0x12,0x85,0x81,0xa8,0x40,0x14,0x4,0xf0,0x66,0x10,0x5,0x21,0x10,0x6c,0x10,0x5,0x29,0xc,0x6,0xe1,0x0,0x57,0x8a,0x7,0x21,0x0,0x58,0x59,0x41,0xc8,0x40,0x16,0x68,0x8,0x1,0x0,0x61,0x7,0xe1,0x0,0x38,0x4,0x0,0xe0,0x10,0x0,0x21,0xa4,0xe,0x30,0x1f,0xd7,0x13,0x3,0x94,0x6c,0xe,0x73,0x54,0xe,0xfc,0x6,0x98,0x0,0x6f,0x60,0x1,0x2,0x8,0x22,0xa4,0x81,0x3a,0x1c,0x91,0x13,0xb8,0x34,0x9d,0xe,0x4e,0x19,0xae,0x68,0xde,0xb,0x19,0x10,0xe4,0x48,0x62,0xab,0x6d,0x2b,0x92,0xe0,0xa5,0x66,0x43,0x92,0x87,0x6d,0x7a,0x4b,0xa8,0x30,0x93,0x8d,0xe4,0x85,0x6b,0x52,0xb2,0xab,0xb8,0x2e,0x8d,0x39,0xe1,0x8d,0xeb,0x7a,0xb2,0x3b,0x81,0x16,0x15,0xa5,0x46,0x91,0x88,0x58,0x12,0x21,0x64,0x5b,0x8b,0x5f,0xd0,0x6d,0x11,0x2,0x48,0x4e,0x89,0x47,0x66,0xba,0x74,0x17,0x54,0x95,0x16,0x74,0x68,0xc8,0x59,0xa8,0x6a,0x1b,0x5a,0xd1,0x99,0x11,0xd0,0xb8,0x53,0x87,0xd2,0x86,0x64,0x9d,0x66,0x44,0x43,0x21,0x66,0x1e,0x41,0xd4,0x2e,0x4e,0x22,0x27,0x85,0x61,0xeb,0x40,0xa6,0x3e,0x8e,0xa1,0x2a,0xd0,0x71,0xb8,0x10,0xe1,0x64,0x1c,0x28,0x5e,0x2a,0x48,0x3e,0x4,0x3,0x64,0x44,0xee,0x4,0x10,0x40,0x2a,0xb9,0xa3,0x78,0x68,0x96,0x17,0x4,0x2,0x6a,0xb6,0xd2,0xb9,0x2e,0x17,0x17,0x84,0xce,0x51,0x65,0x20,0xeb,0x5e,0x92,0xea,0x1a,0x79,0x33,0x61,0x24,0x39,0x4,0x6b,0x52,0xbd,0xab,0xb8,0x5d,0xa8,0x93,0x3,0x7d,0xeb,0x4a,0xac,0x8e,0xe1,0x2a,0xc9,0x9f,0x40,0xce,0x90,0x98,0xf5,0x84,0xe4,0x15,0x98,0x80,0xc5,0x6,0xbd,0x4,0x52,0xc7,0x65,0x87,0x10,0x42,0x88,0x1a,0x74,0x33,0x4c,0x24,0x66,0x12,0x68,0xe1,0x6,0x1d,0x8f,0x69,0xa0,0x91,0x61,0x1,0xe3,0x78,0x20,0xa8,0x41,0x21,0xf4,0x78,0xc0,0x90,0xf4,0x1f,0x42,0xd1,0xc2,0x26,0x49,0xa,0xa,0xd,0x82,0x24,0x2a,0xed,0xa0,0x91,0xe2,0x42,0xa2,0x6b,0x87,0x93,0x89,0xe4,0xc,0x16,0x28,0x2c,0x31,0x7,0xd0,0xd9,0x42,0xc2,0x22,0x42,0xa2,0x6b,0x87,0xe1,0x37,0x2a,0x3b,0x47,0x8a,0xa,0x8a,0xc8,0x1c,0x6a,0x10,0x49,0xf3,0xe9,0x24,0x34,0x2c,0x2b,0x41,0xfd,0x9,0x45,0x91,0x33,0x68,0xdb,0x42,0x2,0xe3,0x90,0x6a,0x69,0xe5,0x44,0xb3,0xd4,0x82,0x67,0xb,0x88,0xbe,0x1c,0xea,0x79,0x51,0x4b,0x18,0x12,0xb,0x8a,0xa8,0x76,0xa2,0x75,0x42,0x1c,0xf5,0x54,0x58,0x80,0xc0,0xb8,0x20,0x8b,0x6d,0xa5,0x32,0x69,0x69,0xe,0xb,0x88,0xf4,0x1c,0xae,0x21,0x32,0x59,0x1b,0x4f,0x7a,0xd9,0xc2,0xc3,0x61,0xe8,0xb4,0x42,0x59,0xd,0x99,0xb2,0x8,0xb,0xa,0xa8,0x7a,0xa2,0x1a,0x24,0x8a,0xe3,0x51,0x11,0xc2,0xe2,0xd6,0x1c,0xe2,0x9a,0x39,0x10,0x9d,0xb4,0x49,0xc2,0xe2,0x20,0x8e,0x28,0x8c,0x66,0x45,0x21,0x6d,0x98,0x2e,0x32,0x1e,0xea,0x66,0x45,0x26,0x49,0x72,0x12,0x52,0x10,0xff,0xfc,0xa2,0x6a,0x1f,0xb9,0x59,0xca,0x32,0xb9,0x13,0x29,0x9,0xe2,0x7d,0x8a,0x61,0xee,0x76,0x4b,0x62,0xa9,0x18,0x8d,0x99,0x8b,0xbc,0x82,0x78,0x7e,0xa5,0x35,0x3a,0x9c,0x8a,0x52,0x15,0x99,0xbf,0x44,0xbe,0x2e,0x8,0xe6,0x65,0xb5,0xa5,0x5d,0x15,0xe4,0x65,0xe4,0xd7,0xd2,0xd1,0xee,0x8,0x22,0xe,0xb3,0x24,0x92,0x99,0x3a,0x67,0xeb,0x92,0xba,0x8c,0xe1,0xf8,0xa2,0x91,0xdf,0xd8,0x84,0x74,0x75,0x43,0x76,0x26,0xa1,0xea,0x88,0x2e,0x92,0x22,0xc8,0x9c,0x8c,0xa6,0x23,0x88,0x96,0x36,0x1e,0x42,0xb2,0xa3,0x88,0xa7,0x21,0x8,0x78,0x41,0xe,0xb8,0x6e,0xe2,0x8b,0x10,0x26,0x8e,0x44,0x1e,0x89,0x4a,0x1c,0x58,0xc1,0xd9,0x49,0x11,0x60,0xb3,0x61,0x84,0x3c,0x27,0x9,0x3,0x4,0x78,0xef,0x43,0x1,0x38,0x2a,0xa5,0x55,0xde,0xbc,0x94,0x44,0x2c,0x44,0x38,0xb,0xeb,0x22,0xdf,0xeb,0x85,0x16,0x83,0x40,0xcb,0x57,0xe9,0xc,0x86,0x2,0xe0,0xde,0xeb,0x9a,0xbe,0x1b,0x17,0x22,0x40,0xd2,0xa5,0x9e,0x9,0x85,0xa8,0x10,0xa5,0x91,0x28,0x20,0x32,0x81,0xda,0xd9,0x60,0x71,0x64,0x99,0x82,0x1,0x60,0x42,0x29,0x27,0x28,0x74,0x58,0x10,0x28,0x8a,0x31,0x87,0x5,0x83,0xec,0xd8,0x43,0x41,0xc1,0x0,0xf5,0x48,0xee,0x71,0x0,0x8e,0x3e,0xb,0x28,0x49,0x22,0x4a,0xa0,0xc0,0x82,0x60,0x8e,0x88,0x69,0xe8,0xb8,0x2c,0x55,0x42,0xe0,0x83,0x14,0xa8,0xad,0xd0,0x2c,0x27,0x40,0xb5,0x21,0x1a,0x37,0x83,0x5,0x54,0x22,0x9,0xdf,0xc9,0x3f,0x83,0x5,0xd8,0xba,0x82,0x47,0x2d,0xa5,0x40,0xd5,0x60,0xd1,0xaf,0xa5,0x83,0x94,0x36,0xa,0xcd,0x40,0x49,0x28,0x1f,0x60,0x3f,0xe0,0x28,0x60,0x5d,0xb8,0x43,0x88,0x40,0x5f,0x41,0x28,0x19,0xee,0x2f,0x9b,0x9b,0xa8,0x16,0x78,0xe4,0x5e,0x22,0x5,0xed,0x9,0x96,0xaf,0xb4,0x6,0xe,0x36,0x91,0x6d,0x50,0x16,0xf8,0xa4,0x57,0x9a,0x58,0x15,0xe6,0x8c,0xa7,0x4c,0xae,0x4,0x9d,0xa,0xd0,0xc9,0x48,0x56,0x96,0x4,0xaa,0x8d,0x8a,0xbb,0x2b,0x4f,0x40,0x4d,0x8d,0x62,0x6d,0x54,0x8b,0x28,0x13,0xa,0x2d,0x50,0xc7,0x18,0xf8,0x12,0x90,0xd2,0x88,0x2f,0x24,0xb5,0xf8,0x19,0x93,0xce,0x9d,0x38,0x19,0x44,0xa6,0x44,0xd0,0x19,0xd2,0x26,0x51,0x4a,0x6,0x46,0x8a,0xca,0xdc,0x80,0x62,0x25,0x69,0x88,0x4d,0x81,0x8c,0x9a,0xa5,0x4a,0x52,0x81,0x8c,0xd4,0x62,0xe9,0x1,0x98,0x41,0x91,0x69,0x81,0x9c,0xcb,0x22,0x24,0x80,0x69,0xb,0x1,0xa0,0x72,0x38,0x1a,0x42,0xa0,0x6c,0xc2,0x20,0x6f,0x71,0xa0,0x70,0x51,0x40,0x76,0x14,0x7,0x73,0x60,0x78,0x60,0x7e,0xa8,0x3,0x73,0xb4,0x25,0x1,0xc0,0x82,0xd8,0x1b,0x38,0xde,0x6,0xe6,0x8c,0x89,0x81,0xb8,0x5b,0x60,0x70,0xfc,0xb4,0x7,0x3c,0xf4,0x3,0x34};

	Prips::Drawable *gurl;
	Prips::Drawable *tiles;
}

static char map[8][8] = {
{15,16,40,25,26,26,26,26},
{23,24,48,3,3,4,3,4},
{31,32,56,3,2,1,2,2},
{1,9,10,10,10,10,11,1},
{2,17,18,18,18,18,19,1},
{1,17,18,18,18,18,19,2},
{2,25,26,26,26,26,27,1},
{6,7,7,7,7,8,2,3}
};

static char mapB[8][8] = {
{0,0,0,43,44,20,21,22},
{0,0,0,51,52,28,29,30},
{14,0,0,59,60,36,37,38},
{22,0,0,41,0,34,0,0},
{30,0,41,34,34,33,12,13},
{38,0,33,42,41,41,20,21},
{0,0,0,0,0,0,28,29},
{0,0,0,0,0,0,36,37}
};

void scene_main_setup() {
    scenesTable[SCENE_MAIN] = {
        &scene_main_on_awake,
        &scene_main_on_enter,
        &scene_main_on_frame,
        &scene_main_on_exit
    };
}

void scene_main_on_awake() {

}

void scene_main_on_enter() {
	
	PNG::gurl = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_gurl);
	PNG::tiles = new Prips::Drawable( (const Prips::byte *const) &PNG::raw_tiles);

	x = 65;
	y = 65;
}

static char direction = 'd';

void scene_main_on_frame() {

	lvDisplay.clear(0);

	for(int y = 0; y < 8; y++) {
		for(int x = 0; x < 8; x++) {
			char tile = map[y][x] - 1;
			if (tile < 0 ) continue;
			PNG::tiles->draw(
				lv::Region( (tile%8) * 16, (tile/8) * 16, 16, 16),
				lv::Point( x * 16, y * 16)
			);
		}
	}

	for(int y = 0; y < 8; y++) {
		for(int x = 0; x < 8; x++) {
			char tile = mapB[y][x] - 1;
			if (tile < 0 ) continue;
			PNG::tiles->draw(
				lv::Region( (tile%8) * 16, (tile/8) * 16, 16, 16),
				lv::Point( x * 16, y * 16)
			);
		}
	}

	if (lvGamepad(0).up) {
		direction = 'u'; y--;
	} else if (lvGamepad(0).down) {
		direction = 'd'; y++;
	} else if (lvGamepad(0).left) {
		direction = 'l'; x--;
	} else if (lvGamepad(0).rigth) {
		direction = 'r'; x++;
	}

	if (y < 30) {
		lvDirector.runScene(SCENE_GAME);
	}

	switch (direction){
		case 'u':
			PNG::gurl->draw(
				lv::Region( 2 * 16, 18 * ((lvGamepad(0).up / 4) % 3), 16, 18),
				lv::Point(x, y)
			); break;
		case 'd':
			PNG::gurl->draw(
				lv::Region( 0 * 16, 18 * ((lvGamepad(0).down / 4) % 3), 16, 18),
				lv::Point(x, y)
			); break;
		case 'l':
			PNG::gurl->draw(
				lv::Region( 3 * 16, 18 * ((lvGamepad(0).left / 4) % 3), 16, 18),
				lv::Point(x, y)
			); break;
		case 'r':
			PNG::gurl->draw(
				lv::Region( 1 * 16, 18 * ((lvGamepad(0).rigth / 4) % 3), 16, 18),
				lv::Point(x, y)
			); break;
	}

	
}

void scene_main_on_exit() {
	delete PNG::gurl;
	delete PNG::tiles;
}
